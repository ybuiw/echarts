import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useEffect, useRef, useState } from 'react';
import * as echarts from 'echarts/core';
import { GridComponent, TooltipComponent } from 'echarts/components';
import { BarChart } from 'echarts/charts';
import { CanvasRenderer } from 'echarts/renderers';
echarts.use([GridComponent, TooltipComponent, BarChart, CanvasRenderer]);

var EChartsBar = function EChartsBar(props) {
  var _props$width = props.width,
      width = _props$width === void 0 ? '100%' : _props$width,
      _props$height = props.height,
      height = _props$height === void 0 ? '100%' : _props$height,
      _props$colors = props.colors,
      colors = _props$colors === void 0 ? ['#5470c6', '#91cc75', '#fac858', '#ee6666', '#73c0de', '#3ba272', '#fc8452', '#9a60b4', '#ea7ccc'] : _props$colors,
      _props$isHorizontal = props.isHorizontal,
      isHorizontal = _props$isHorizontal === void 0 ? false : _props$isHorizontal,
      _props$color = props.color,
      color = _props$color === void 0 ? '#333' : _props$color,
      _props$lineColor = props.lineColor,
      lineColor = _props$lineColor === void 0 ? '#abb9d0' : _props$lineColor,
      _props$splitColor = props.splitColor,
      splitColor = _props$splitColor === void 0 ? '#e0e7f3' : _props$splitColor,
      _props$fontSize = props.fontSize,
      fontSize = _props$fontSize === void 0 ? 14 : _props$fontSize,
      _props$data = props.data,
      data = _props$data === void 0 ? [] : _props$data,
      _props$xAxis = props.xAxis,
      xAxis = _props$xAxis === void 0 ? {} : _props$xAxis,
      _props$yAxis = props.yAxis,
      yAxis = _props$yAxis === void 0 ? {} : _props$yAxis,
      _props$grid = props.grid,
      grid = _props$grid === void 0 ? {} : _props$grid,
      _props$areaStyle = props.areaStyle,
      areaStyle = _props$areaStyle === void 0 ? {} : _props$areaStyle,
      _props$itemStyle = props.itemStyle,
      itemStyle = _props$itemStyle === void 0 ? {} : _props$itemStyle,
      _props$isSwitch = props.isSwitch,
      isSwitch = _props$isSwitch === void 0 ? false : _props$isSwitch,
      _props$switchTime = props.switchTime,
      switchTime = _props$switchTime === void 0 ? 2000 : _props$switchTime,
      onClick = props.onClick;
  var chartRef = useRef(null);

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      myChart = _useState2[0],
      setMyChart = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 1),
      isHigh = _useState4[0];

  var _useState5 = useState(0),
      _useState6 = _slicedToArray(_useState5, 2),
      highIndex = _useState6[0],
      setHighIndex = _useState6[1];

  useEffect(function () {
    var _myChart = echarts.init(chartRef.current);

    setMyChart(_myChart);
    window.addEventListener("resize", _myChart.resize, false);
    window.addEventListener('load', _myChart.resize, false);

    _myChart.off('click');

    _myChart.on('click', function (v) {
      onClick === null || onClick === void 0 ? void 0 : onClick(v.data);
      console.log(v.data);
    });

    return function () {
      console.log(2);
      window.removeEventListener('resize', _myChart.resize, false);
      window.removeEventListener('load', _myChart.resize, false);

      _myChart.dispose();
    };
  }, []);
  useEffect(function () {
    if (myChart) {
      myChart.clear();
      var _names = [];
      data.length > 0 && data.map(function (item) {
        _names.push(item.name);
      });

      var _grid = _objectSpread(_objectSpread({}, {
        top: '5%',
        bottom: '10%',
        left: '10%',
        right: '5%'
      }), grid);

      var _xAxis = {
        type: 'category',
        inverse: isHorizontal ? true : false,
        axisLabel: {
          color: xAxis.color ? xAxis.color : color,
          fontSize: xAxis.fontSize ? xAxis.fontSize : fontSize,
          rotate: xAxis.rotate ? xAxis.rotate : 0
        },
        axisLine: {
          show: xAxis.lineColor === false ? false : true,
          lineStyle: {
            color: xAxis.lineColor ? xAxis.lineColor : lineColor
          }
        },
        axisTick: {
          show: xAxis.isTick
        },
        splitLine: {
          show: xAxis.splitColor ? true : false,
          lineStyle: {
            color: xAxis.splitColor ? xAxis.splitColor : splitColor
          }
        },
        data: _names
      };
      var _yAxis = {
        name: yAxis.name,
        type: 'value',
        axisLabel: {
          color: yAxis.color ? yAxis.color : color,
          fontSize: yAxis.fontSize ? yAxis.fontSize : fontSize
        },
        axisLine: {
          show: yAxis.lineColor === false ? false : true,
          lineStyle: {
            color: yAxis.lineColor ? yAxis.lineColor : lineColor
          }
        },
        axisTick: {
          show: false
        },
        splitLine: {
          show: yAxis.splitColor === false ? false : true,
          lineStyle: {
            color: yAxis.splitColor ? yAxis.splitColor : splitColor
          }
        }
      };

      var _areaColor;

      if (areaStyle.isGrad) {
        if (Array.isArray(areaStyle.color) && areaStyle.color.length > 1) {
          _areaColor = {
            type: 'linear',
            x: 0,
            y: 0,
            x2: 0,
            y2: 1,
            colorStops: [{
              offset: 0,
              color: areaStyle.color[0]
            }, {
              offset: 1,
              color: areaStyle.color[1]
            }],
            global: false
          };
        } else {
          _areaColor = {
            type: 'linear',
            x: 0,
            y: 0,
            x2: 0,
            y2: 1,
            colorStops: [{
              offset: 0,
              color: colors[0]
            }, {
              offset: 1,
              color: 'rgba(255,255,255,0)'
            }],
            global: false
          };
        }
      }

      myChart.setOption({
        tooltip: {
          trigger: 'axis',
          transitionDuration: 0,
          enterable: true,
          axisPointer: {
            type: 'shadow'
          }
        },
        color: colors,
        grid: _grid,
        xAxis: isHorizontal ? _yAxis : _xAxis,
        yAxis: isHorizontal ? _xAxis : _yAxis,
        series: [{
          data: data,
          type: 'bar',
          barWidth: itemStyle.barWidth,
          itemStyle: {
            color: _areaColor,
            borderRadius: itemStyle.borderRadius ? itemStyle.borderRadius : 0
          }
        }]
      }, true);
    }
  }, [myChart, data]);
  useEffect(function () {
    var faultByHourTime;

    if (myChart && isSwitch && !isHigh && data.length > 0) {
      faultByHourTime = setInterval(function () {
        setHighIndex(function (n) {
          myChart.dispatchAction({
            type: 'showTip',
            seriesIndex: 0,
            dataIndex: n
          });

          if (n >= data.length - 1) {
            return 0;
          } else {
            return n + 1;
          }
        });
      }, switchTime);
    }

    return function () {
      clearInterval(faultByHourTime);
    };
  }, [myChart, isSwitch, isHigh, data]);
  return /*#__PURE__*/React.createElement("div", {
    ref: chartRef,
    style: {
      'width': width,
      'height': height
    }
  });
};

export default EChartsBar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,