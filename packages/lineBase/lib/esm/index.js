import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useEffect, useRef, useState } from 'react';
import * as echarts from 'echarts/core';
import { GridComponent, TooltipComponent } from 'echarts/components';
import { LineChart } from 'echarts/charts';
import { CanvasRenderer } from 'echarts/renderers';
echarts.use([GridComponent, TooltipComponent, LineChart, CanvasRenderer]);

var EChartsLine = function EChartsLine(props) {
  var _props$width = props.width,
      width = _props$width === void 0 ? '100%' : _props$width,
      _props$height = props.height,
      height = _props$height === void 0 ? '100%' : _props$height,
      _props$smooth = props.smooth,
      smooth = _props$smooth === void 0 ? false : _props$smooth,
      _props$colors = props.colors,
      colors = _props$colors === void 0 ? ['#5470c6', '#91cc75', '#fac858', '#ee6666', '#73c0de', '#3ba272', '#fc8452', '#9a60b4', '#ea7ccc'] : _props$colors,
      _props$color = props.color,
      color = _props$color === void 0 ? '#333' : _props$color,
      _props$lineColor = props.lineColor,
      lineColor = _props$lineColor === void 0 ? '#abb9d0' : _props$lineColor,
      _props$splitColor = props.splitColor,
      splitColor = _props$splitColor === void 0 ? '#e0e7f3' : _props$splitColor,
      _props$fontSize = props.fontSize,
      fontSize = _props$fontSize === void 0 ? 14 : _props$fontSize,
      _props$data = props.data,
      data = _props$data === void 0 ? [] : _props$data,
      _props$xAxis = props.xAxis,
      xAxis = _props$xAxis === void 0 ? {} : _props$xAxis,
      _props$yAxis = props.yAxis,
      yAxis = _props$yAxis === void 0 ? {} : _props$yAxis,
      _props$grid = props.grid,
      grid = _props$grid === void 0 ? {} : _props$grid,
      _props$areaStyle = props.areaStyle,
      areaStyle = _props$areaStyle === void 0 ? {} : _props$areaStyle,
      _props$isSwitch = props.isSwitch,
      isSwitch = _props$isSwitch === void 0 ? false : _props$isSwitch,
      _props$switchTime = props.switchTime,
      switchTime = _props$switchTime === void 0 ? 2000 : _props$switchTime,
      onClick = props.onClick;
  var chartRef = useRef(null);

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      myChart = _useState2[0],
      setMyChart = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 1),
      isHigh = _useState4[0];

  var _useState5 = useState(0),
      _useState6 = _slicedToArray(_useState5, 2),
      highIndex = _useState6[0],
      setHighIndex = _useState6[1];

  useEffect(function () {
    var _myChart = echarts.init(chartRef.current);

    setMyChart(_myChart);
    window.addEventListener("resize", _myChart.resize, false);
    window.addEventListener('load', _myChart.resize, false);

    _myChart.off('click');

    _myChart.on('click', function (v) {
      onClick === null || onClick === void 0 ? void 0 : onClick(v.data);
      console.log(v.data);
    });

    return function () {
      console.log(2);
      window.removeEventListener('resize', _myChart.resize, false);
      window.removeEventListener('load', _myChart.resize, false);

      _myChart.dispose();
    };
  }, []);
  useEffect(function () {
    if (myChart) {
      myChart.clear();
      var _names = [];
      data.length > 0 && data.map(function (item) {
        _names.push(item.name);
      });

      var _grid = _objectSpread(_objectSpread({}, {
        top: '5%',
        bottom: '10%',
        left: '10%',
        right: '5%'
      }), grid);

      var _xAxis = {
        type: 'category',
        boundaryGap: false,
        axisLabel: {
          color: xAxis.color ? xAxis.color : color,
          fontSize: xAxis.fontSize ? xAxis.fontSize : fontSize,
          rotate: xAxis.rotate ? xAxis.rotate : 0
        },
        axisLine: {
          show: xAxis.lineColor === false ? false : true,
          lineStyle: {
            color: xAxis.lineColor ? xAxis.lineColor : lineColor
          }
        },
        axisTick: {
          show: xAxis.isTick
        },
        splitLine: {
          show: xAxis.splitColor ? true : false,
          lineStyle: {
            color: xAxis.splitColor ? xAxis.splitColor : splitColor
          }
        },
        data: _names
      };
      var _yAxis = {
        name: yAxis.name,
        type: 'value',
        axisLabel: {
          color: yAxis.color ? yAxis.color : color,
          fontSize: yAxis.fontSize ? yAxis.fontSize : fontSize
        },
        axisLine: {
          show: yAxis.lineColor === false ? false : true,
          lineStyle: {
            color: yAxis.lineColor ? yAxis.lineColor : lineColor
          }
        },
        axisTick: {
          show: false
        },
        splitLine: {
          show: yAxis.splitColor === false ? false : true,
          lineStyle: {
            color: yAxis.splitColor ? yAxis.splitColor : splitColor
          }
        }
      };

      var _areaColor;

      if (areaStyle.isGrad) {
        if (Array.isArray(areaStyle.color) && areaStyle.color.length > 1) {
          _areaColor = {
            type: 'linear',
            x: 0,
            y: 0,
            x2: 0,
            y2: 1,
            colorStops: [{
              offset: 0,
              color: areaStyle.color[0]
            }, {
              offset: 1,
              color: areaStyle.color[1]
            }],
            global: false
          };
        } else {
          _areaColor = {
            type: 'linear',
            x: 0,
            y: 0,
            x2: 0,
            y2: 1,
            colorStops: [{
              offset: 0,
              color: colors[0]
            }, {
              offset: 1,
              color: 'rgba(255,255,255,0)'
            }],
            global: false
          };
        }
      }

      myChart.setOption({
        tooltip: {
          trigger: 'axis',
          transitionDuration: 0,
          enterable: true,
          axisPointer: {
            type: 'shadow'
          }
        },
        color: colors,
        grid: _grid,
        xAxis: _xAxis,
        yAxis: _yAxis,
        series: [{
          data: data,
          type: 'line',
          smooth: smooth,
          areaStyle: areaStyle.show ? {
            color: _areaColor
          } : undefined,
          lineStyle: {
            width: 1
          }
        }]
      }, true);
    }
  }, [myChart, data]);
  useEffect(function () {
    var faultByHourTime;

    if (myChart && isSwitch && !isHigh && data.length > 0) {
      faultByHourTime = setInterval(function () {
        setHighIndex(function (n) {
          myChart.dispatchAction({
            type: 'showTip',
            seriesIndex: 0,
            dataIndex: n
          });

          if (n >= data.length - 1) {
            return 0;
          } else {
            return n + 1;
          }
        });
      }, switchTime);
    }

    return function () {
      clearInterval(faultByHourTime);
    };
  }, [myChart, isSwitch, isHigh, data]);
  return /*#__PURE__*/React.createElement("div", {
    ref: chartRef,
    style: {
      'width': width,
      'height': height
    }
  });
};

export default EChartsLine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmRleC50c3giXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VFZmZlY3QiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsImVjaGFydHMiLCJHcmlkQ29tcG9uZW50IiwiVG9vbHRpcENvbXBvbmVudCIsIkxpbmVDaGFydCIsIkNhbnZhc1JlbmRlcmVyIiwidXNlIiwiRUNoYXJ0c0xpbmUiLCJwcm9wcyIsIndpZHRoIiwiaGVpZ2h0Iiwic21vb3RoIiwiY29sb3JzIiwiY29sb3IiLCJsaW5lQ29sb3IiLCJzcGxpdENvbG9yIiwiZm9udFNpemUiLCJkYXRhIiwieEF4aXMiLCJ5QXhpcyIsImdyaWQiLCJhcmVhU3R5bGUiLCJpc1N3aXRjaCIsInN3aXRjaFRpbWUiLCJvbkNsaWNrIiwiY2hhcnRSZWYiLCJteUNoYXJ0Iiwic2V0TXlDaGFydCIsImlzSGlnaCIsImhpZ2hJbmRleCIsInNldEhpZ2hJbmRleCIsIl9teUNoYXJ0IiwiaW5pdCIsImN1cnJlbnQiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwicmVzaXplIiwib2ZmIiwib24iLCJ2IiwiY29uc29sZSIsImxvZyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkaXNwb3NlIiwiY2xlYXIiLCJfbmFtZXMiLCJsZW5ndGgiLCJtYXAiLCJpdGVtIiwicHVzaCIsIm5hbWUiLCJfZ3JpZCIsInRvcCIsImJvdHRvbSIsImxlZnQiLCJyaWdodCIsIl94QXhpcyIsInR5cGUiLCJib3VuZGFyeUdhcCIsImF4aXNMYWJlbCIsInJvdGF0ZSIsImF4aXNMaW5lIiwic2hvdyIsImxpbmVTdHlsZSIsImF4aXNUaWNrIiwiaXNUaWNrIiwic3BsaXRMaW5lIiwiX3lBeGlzIiwiX2FyZWFDb2xvciIsImlzR3JhZCIsIkFycmF5IiwiaXNBcnJheSIsIngiLCJ5IiwieDIiLCJ5MiIsImNvbG9yU3RvcHMiLCJvZmZzZXQiLCJnbG9iYWwiLCJzZXRPcHRpb24iLCJ0b29sdGlwIiwidHJpZ2dlciIsInRyYW5zaXRpb25EdXJhdGlvbiIsImVudGVyYWJsZSIsImF4aXNQb2ludGVyIiwic2VyaWVzIiwidW5kZWZpbmVkIiwiZmF1bHRCeUhvdXJUaW1lIiwic2V0SW50ZXJ2YWwiLCJuIiwiZGlzcGF0Y2hBY3Rpb24iLCJzZXJpZXNJbmRleCIsImRhdGFJbmRleCIsImNsZWFySW50ZXJ2YWwiXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBT0EsS0FBUCxJQUFnQkMsU0FBaEIsRUFBMkJDLE1BQTNCLEVBQW1DQyxRQUFuQyxRQUFtRCxPQUFuRDtBQUVBLE9BQU8sS0FBS0MsT0FBWixNQUF5QixjQUF6QjtBQUNBLFNBQVNDLGFBQVQsRUFBd0JDLGdCQUF4QixRQUFxRSxvQkFBckU7QUFDQSxTQUFTQyxTQUFULFFBQTBCLGdCQUExQjtBQUNBLFNBQVNDLGNBQVQsUUFBK0IsbUJBQS9CO0FBRUFKLE9BQU8sQ0FBQ0ssR0FBUixDQUNFLENBQUNKLGFBQUQsRUFBZ0JDLGdCQUFoQixFQUFrQ0MsU0FBbEMsRUFBNkNDLGNBQTdDLENBREY7O0FBd0VBLElBQU1FLFdBQVcsR0FBRyxTQUFkQSxXQUFjLENBQUNDLEtBQUQsRUFBMEI7QUFBQSxxQkFrQnhDQSxLQWxCd0MsQ0FFMUNDLEtBRjBDO0FBQUEsTUFFMUNBLEtBRjBDLDZCQUVsQyxNQUZrQztBQUFBLHNCQWtCeENELEtBbEJ3QyxDQUcxQ0UsTUFIMEM7QUFBQSxNQUcxQ0EsTUFIMEMsOEJBR2pDLE1BSGlDO0FBQUEsc0JBa0J4Q0YsS0FsQndDLENBSTFDRyxNQUowQztBQUFBLE1BSTFDQSxNQUowQyw4QkFJakMsS0FKaUM7QUFBQSxzQkFrQnhDSCxLQWxCd0MsQ0FLMUNJLE1BTDBDO0FBQUEsTUFLMUNBLE1BTDBDLDhCQUtqQyxDQUFDLFNBQUQsRUFBWSxTQUFaLEVBQXVCLFNBQXZCLEVBQWtDLFNBQWxDLEVBQTZDLFNBQTdDLEVBQXdELFNBQXhELEVBQW1FLFNBQW5FLEVBQThFLFNBQTlFLEVBQXlGLFNBQXpGLENBTGlDO0FBQUEscUJBa0J4Q0osS0FsQndDLENBTTFDSyxLQU4wQztBQUFB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bXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgKiBhcyBlY2hhcnRzIGZyb20gJ2VjaGFydHMvY29yZSc7XG5pbXBvcnQgeyBHcmlkQ29tcG9uZW50LCBUb29sdGlwQ29tcG9uZW50LCBHcmlkQ29tcG9uZW50T3B0aW9uIH0gZnJvbSAnZWNoYXJ0cy9jb21wb25lbnRzJztcbmltcG9ydCB7IExpbmVDaGFydCB9IGZyb20gJ2VjaGFydHMvY2hhcnRzJztcbmltcG9ydCB7IENhbnZhc1JlbmRlcmVyIH0gZnJvbSAnZWNoYXJ0cy9yZW5kZXJlcnMnO1xuXG5lY2hhcnRzLnVzZShcbiAgW0dyaWRDb21wb25lbnQsIFRvb2x0aXBDb21wb25lbnQsIExpbmVDaGFydCwgQ2FudmFzUmVuZGVyZXJdXG4pO1xuXG5pbnRlcmZhY2UgeEF4aXNQcm9wcyB7XG4gIGNvbG9yPzogc3RyaW5nO1xuICBmb250U2l6ZT86IG51bWJlcjtcbiAgbGluZUNvbG9yPzogc3RyaW5nIHwgYm9vbGVhbjtcbiAgc3BsaXRDb2xvcj86IHN0cmluZyB8IGJvb2xlYW47XG4gIHJvdGF0ZT86IG51bWJlcjtcbiAgaXNUaWNrPzogYm9vbGVhbjtcbn1cblxuaW50ZXJmYWNlIHlBeGlzUHJvcHMge1xuICBuYW1lPzogc3RyaW5nO1xuICBjb2xvcj86IHN0cmluZztcbiAgZm9udFNpemU/OiBudW1iZXI7XG4gIGxpbmVDb2xvcj86IHN0cmluZyB8IGJvb2xlYW47XG4gIHNwbGl0Q29sb3I/OiBzdHJpbmcgfCBib29sZWFuO1xufVxuXG5pbnRlcmZhY2UgYXJlYVN0eWxlUHJvcHMge1xuICBzaG93PzogYm9vbGVhbjtcbiAgaXNHcmFkPzogYm9vbGVhbjtcbiAgY29sb3I/OiBzdHJpbmdbXVxufVxuXG5pbnRlcmZhY2UgTGluZUJhc2VQcm9wcyB7XG4gIGRhdGE/OiBhbnlbXTtcbiAgd2lkdGg/OiBzdHJpbmc7XG4gIGhlaWdodD86IHN0cmluZztcbiAgLyoqIOaYr+WQpuW5s+a7keabsue6v+aYvuekuiAqL1xuICBzbW9vdGg/OiBib29sZWFuO1xuICAvKiog5a2X5L2T6aKc6ImyICovXG4gIGNvbG9yPzogc3RyaW5nO1xuICAvKiogeCwgeei9tOi9tOe6v+e6v+adoeminOiJsiAqL1xuICBsaW5lQ29sb3I/OiBzdHJpbmc7XG4gIC8qKiB4LCB56L20572R5qC857q/5p2h6aKc6ImyICovXG4gIHNwbGl0Q29sb3I/OiBzdHJpbmc7XG4gIC8qKiDlrZfkvZPlpKflsI/vvIzpu5jorqQxNOWDj+e0oCAqL1xuICBmb250U2l6ZT86IG51bWJlciB8IHN0cmluZztcbiAgLyoqIOaKmOe6v+minOiJsiAqL1xuICBjb2xvcnM/OiBzdHJpbmdbXTtcbiAgLyoqIOaYr+WQpuiHquWKqOWIh+aNoiBUb29sdGlwICovXG4gIGlzU3dpdGNoPzogYm9vbGVhbjtcbiAgLyoqIOiHquWKqOWIh+aNouS6i+S7tiDpu5jorqQgMjAwMO+8iDJT77yJICovXG4gIHN3aXRjaFRpbWU/OiBudW1iZXI7XG4gIC8qKiDljLrln5/loavlhYXmoLflvI8gKi9cbiAgYXJlYVN0eWxlPzogYXJlYVN0eWxlUHJvcHM7XG4gIC8qKlxuICAgKiBYIOi9tOmFjee9rlxuICAgKiBAY29sb3Ig5paH5a2X6aKc6ImyXG4gICAqIEBzaXplIOaWh+Wtl+Wkp+Wwj1xuICAgKiBAbGluZUNvbG9yIHjovbTovbTnur/nur/mnaHpopzoibIsIGZhbHNlIOWImeS4jeaYvuekulxuICAgKiBAc3BsaXRDb2xvciB46L20572R5qC857q/5p2h6aKc6ImyLCBmYWxzZSDliJnkuI3mmL7npLosIOm7mOiupHRydWVcbiAgICogQHJvdGF0ZSDliLvluqbmoIfnrb7ml4vovazop5LluqZcbiAgICogQGlzVGljayDmmK/lkKbmmL7npLrlnZDmoIfovbTliLvluqZcbiAgICovXG4gIHhBeGlzPzogeEF4aXNQcm9wcztcbiAgLyoqXG4gICAqIHkg6L206YWN572uXG4gICAqIEBuYW1lIOWdkOagh+i9tOWQjeensFxuICAgKiBAY29sb3Ig5paH5a2X6aKc6ImyXG4gICAqIEBzaXplIOaWh+Wtl+Wkp+Wwj1xuICAgKiBAbGluZUNvbG9yIHnovbTovbTnur/nur/mnaHpopzoibIsIGZhbHNlIOWImeS4jeaYvuekulxuICAgKiBAc3BsaXRDb2xvciB56L20572R5qC857q/5p2h6aKc6ImyLCBmYWxzZSDliJnkuI3mmL7npLosIOm7mOiupGZhbHNlXG4gICAqL1xuICB5QXhpcz86IHlBeGlzUHJvcHM7XG4gIGdyaWQ/OiBHcmlkQ29tcG9uZW50T3B0aW9uO1xuICBvbkNsaWNrPzogKHY6IGFueSkgPT4gdm9pZDtcbn1cblxuY29uc3QgRUNoYXJ0c0xpbmUgPSAocHJvcHM6IExpbmVCYXNlUHJvcHMpID0+IHtcbiAgY29uc3Qge1xuICAgIHdpZHRoID0gJzEwMCUnLFxuICAgIGhlaWdodCA9ICcxMDAlJyxcbiAgICBzbW9vdGggPSBmYWxzZSxcbiAgICBjb2xvcnMgPSBbJyM1NDcwYzYnLCAnIzkxY2M3NScsICcjZmFjODU4JywgJyNlZTY2NjYnLCAnIzczYzBkZScsICcjM2JhMjcyJywgJyNmYzg0NTInLCAnIzlhNjBiNCcsICcjZWE3Y2NjJ10sXG4gICAgY29sb3IgPSAnIzMzMycsXG4gICAgbGluZUNvbG9yID0gJyNhYmI5ZDAnLFxuICAgIHNwbGl0Q29sb3IgPSAnI2UwZTdmMycsXG4gICAgZm9udFNpemUgPSAxNCxcbiAgICBkYXRhID0gW10sXG4gICAgeEF4aXMgPSB7fSxcbiAgICB5QXhpcyA9IHt9LFxuICAgIGdyaWQgPSB7fSxcbiAgICBhcmVhU3R5bGUgPSB7fSxcbiAgICBpc1N3aXRjaCA9IGZhbHNlLFxuICAgIHN3aXRjaFRpbWUgPSAyMDAwLFxuICAgIG9uQ2xpY2tcbiAgfSA9IHByb3BzO1xuXG4gIGNvbnN0IGNoYXJ0UmVmID0gdXNlUmVmPGFueT4obnVsbClcbiAgY29uc3QgW215Q2hhcnQsIHNldE15Q2hhcnRdID0gdXNlU3RhdGU8YW55PihudWxsKTtcbiAgY29uc3QgW2lzSGlnaF0gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XG4gIGNvbnN0IFtoaWdoSW5kZXgsIHNldEhpZ2hJbmRleF0gPSB1c2VTdGF0ZTxudW1iZXI+KDApO1xuICBcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBfbXlDaGFydDogYW55ID0gZWNoYXJ0cy5pbml0KGNoYXJ0UmVmLmN1cnJlbnQpO1xuICAgIHNldE15Q2hhcnQoX215Q2hhcnQpXG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBfbXlDaGFydC5yZXNpemUsIGZhbHNlKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIF9teUNoYXJ0LnJlc2l6ZSwgZmFsc2UpO1xuICAgIF9teUNoYXJ0Lm9mZignY2xpY2snKTtcbiAgICBfbXlDaGFydC5vbignY2xpY2snLCAodjogYW55KSA9PiB7XG4gICAgICBvbkNsaWNrPy4odi5kYXRhKTtcbiAgICAgIGNvbnNvbGUubG9nKHYuZGF0YSlcbiAgICB9KVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygyKVxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIF9teUNoYXJ0LnJlc2l6ZSwgZmFsc2UpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBfbXlDaGFydC5yZXNpemUsIGZhbHNlKTtcbiAgICAgIF9teUNoYXJ0LmRpc3Bvc2UoKTtcbiAgICB9XG4gIH0sIFtdKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKG15Q2hhcnQpIHtcbiAgICAgIG15Q2hhcnQuY2xlYXIoKTtcbiAgICAgIGNvbnN0IF9uYW1lczogc3RyaW5nW10gPSBbXTtcbiAgICAgIGRhdGEubGVuZ3RoID4gMCAmJiBkYXRhLm1hcCgoaXRlbTogYW55KSA9PiB7XG4gICAgICAgIF9uYW1lcy5wdXNoKGl0ZW0ubmFtZSk7XG4gICAgICB9KVxuICAgICAgY29uc3QgX2dyaWQ6IEdyaWRDb21wb25lbnRPcHRpb24gPSB7Li4ue1xuICAgICAgICB0b3A6ICc1JScsXG4gICAgICAgIGJvdHRvbTogJzEwJScsXG4gICAgICAgIGxlZnQ6ICcxMCUnLFxuICAgICAgICByaWdodDogJzUlJyxcbiAgICAgIH0sIC4uLmdyaWR9O1xuICAgICAgY29uc3QgX3hBeGlzOiBhbnkgPSB7XG4gICAgICAgIHR5cGU6ICdjYXRlZ29yeScsXG4gICAgICAgIGJvdW5kYXJ5R2FwOiBmYWxzZSxcbiAgICAgICAgYXhpc0xhYmVsOiB7XG4gICAgICAgICAgY29sb3I6IHhBeGlzLmNvbG9yID8geEF4aXMuY29sb3IgOiBjb2xvcixcbiAgICAgICAgICBmb250U2l6ZTogeEF4aXMuZm9udFNpemUgPyB4QXhpcy5mb250U2l6ZSA6IGZvbnRTaXplLFxuICAgICAgICAgIHJvdGF0ZTogeEF4aXMucm90YXRlID8geEF4aXMucm90YXRlIDogMCxcbiAgICAgICAgfSxcbiAgICAgICAgYXhpc0xpbmU6IHtcbiAgICAgICAgICBzaG93OiB4QXhpcy5saW5lQ29sb3IgPT09IGZhbHNlID8gZmFsc2UgOiB0cnVlLFxuICAgICAgICAgIGxpbmVTdHlsZToge1xuICAgICAgICAgICAgY29sb3I6IHhBeGlzLmxpbmVDb2xvciA/IHhBeGlzLmxpbmVDb2xvciA6IGxpbmVDb2xvcixcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGF4aXNUaWNrOiB7XG4gICAgICAgICAgc2hvdzogeEF4aXMuaXNUaWNrLFxuICAgICAgICB9LFxuICAgICAgICBzcGxpdExpbmU6IHtcbiAgICAgICAgICBzaG93OiB4QXhpcy5zcGxpdENvbG9yID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgICAgIGxpbmVTdHlsZToge1xuICAgICAgICAgICAgY29sb3I6IHhBeGlzLnNwbGl0Q29sb3IgPyB4QXhpcy5zcGxpdENvbG9yIDogc3BsaXRDb2xvcixcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRhdGE6IF9uYW1lc1xuICAgICAgfVxuICAgICAgY29uc3QgX3lBeGlzOiBhbnkgPSB7XG4gICAgICAgIG5hbWU6IHlBeGlzLm5hbWUsXG4gICAgICAgIHR5cGU6ICd2YWx1ZScsXG4gICAgICAgIGF4aXNMYWJlbDoge1xuICAgICAgICAgIGNvbG9yOiB5QXhpcy5jb2xvciA/IHlBeGlzLmNvbG9yIDogY29sb3IsXG4gICAgICAgICAgZm9udFNpemU6IHlBeGlzLmZvbnRTaXplID8geUF4aXMuZm9udFNpemUgOiBmb250U2l6ZSxcbiAgICAgICAgfSxcbiAgICAgICAgYXhpc0xpbmU6IHtcbiAgICAgICAgICBzaG93OiB5QXhpcy5saW5lQ29sb3IgPT09IGZhbHNlID8gZmFsc2UgOiB0cnVlLFxuICAgICAgICAgIGxpbmVTdHlsZToge1xuICAgICAgICAgICAgY29sb3I6IHlBeGlzLmxpbmVDb2xvciA/IHlBeGlzLmxpbmVDb2xvciA6IGxpbmVDb2xvcixcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBheGlzVGljazoge1xuICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICBzcGxpdExpbmU6IHtcbiAgICAgICAgICBzaG93OiB5QXhpcy5zcGxpdENvbG9yID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZSxcbiAgICAgICAgICBsaW5lU3R5bGU6IHtcbiAgICAgICAgICAgIGNvbG9yOiB5QXhpcy5zcGxpdENvbG9yID8geUF4aXMuc3BsaXRDb2xvciA6IHNwbGl0Q29sb3IsXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgfVxuICAgICAgbGV0IF9hcmVhQ29sb3I6IGFueTtcbiAgICAgIGlmIChhcmVhU3R5bGUuaXNHcmFkKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZWFTdHlsZS5jb2xvcikgJiYgYXJlYVN0eWxlLmNvbG9yLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBfYXJlYUNvbG9yID0ge1xuICAgICAgICAgICAgdHlwZTogJ2xpbmVhcicsXG4gICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgIHgyOiAwLFxuICAgICAgICAgICAgeTI6IDEsXG4gICAgICAgICAgICBjb2xvclN0b3BzOiBbe1xuICAgICAgICAgICAgICBvZmZzZXQ6IDAsIGNvbG9yOiBhcmVhU3R5bGUuY29sb3JbMF1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDEsIGNvbG9yOiBhcmVhU3R5bGUuY29sb3JbMV1cbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgZ2xvYmFsOiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfYXJlYUNvbG9yID0ge1xuICAgICAgICAgICAgdHlwZTogJ2xpbmVhcicsXG4gICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgIHgyOiAwLFxuICAgICAgICAgICAgeTI6IDEsXG4gICAgICAgICAgICBjb2xvclN0b3BzOiBbe1xuICAgICAgICAgICAgICBvZmZzZXQ6IDAsIGNvbG9yOiBjb2xvcnNbMF1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgb2Zmc2V0OiAxLCBjb2xvcjogJ3JnYmEoMjU1LDI1NSwyNTUsMCknXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIGdsb2JhbDogZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG15Q2hhcnQuc2V0T3B0aW9uKHtcbiAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgIHRyaWdnZXI6ICdheGlzJyxcbiAgICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb246IDAsXG4gICAgICAgICAgZW50ZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGF4aXNQb2ludGVyOiB7XG4gICAgICAgICAgICB0eXBlOiAnc2hhZG93J1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY29sb3I6IGNvbG9ycyxcbiAgICAgICAgZ3JpZDogX2dyaWQsXG4gICAgICAgIHhBeGlzOiBfeEF4aXMsXG4gICAgICAgIHlBeGlzOiBfeUF4aXMsXG4gICAgICAgIHNlcmllczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICB0eXBlOiAnbGluZScsXG4gICAgICAgICAgICBzbW9vdGg6IHNtb290aCxcbiAgICAgICAgICAgIGFyZWFTdHlsZTogYXJlYVN0eWxlLnNob3cgPyB7XG4gICAgICAgICAgICAgIGNvbG9yOiBfYXJlYUNvbG9yXG4gICAgICAgICAgICB9IDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgbGluZVN0eWxlOiB7XG4gICAgICAgICAgICAgIHdpZHRoOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9LCB0cnVlKTtcbiAgICB9XG4gIH0sIFtteUNoYXJ0LCBkYXRhXSlcbiAgXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IGZhdWx0QnlIb3VyVGltZTogYW55O1xuICAgIGlmIChteUNoYXJ0ICYmIGlzU3dpdGNoICYmICFpc0hpZ2ggJiYgZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICBmYXVsdEJ5SG91clRpbWUgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIHNldEhpZ2hJbmRleChuID0+IHtcbiAgICAgICAgICBteUNoYXJ0LmRpc3BhdGNoQWN0aW9uKHtcbiAgICAgICAgICAgIHR5cGU6ICdzaG93VGlwJyxcbiAgICAgICAgICAgIHNlcmllc0luZGV4OiAwLFxuICAgICAgICAgICAgZGF0YUluZGV4OiBuXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKG4gPj0gZGF0YS5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG4gKyAxXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSwgc3dpdGNoVGltZSlcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNsZWFySW50ZXJ2YWwoZmF1bHRCeUhvdXJUaW1lKVxuICAgIH1cbiAgfSwgW215Q2hhcnQsIGlzU3dpdGNoLCBpc0hpZ2gsIGRhdGFdKVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiByZWY9e2NoYXJ0UmVmfVxuICAgICAgc3R5bGU9e3tcbiAgICAgICAgJ3dpZHRoJzogd2lkdGgsXG4gICAgICAgICdoZWlnaHQnOiBoZWlnaHRcbiAgICAgIH19PlxuICAgIDwvZGl2PlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEVDaGFydHNMaW5lOyJdfQ==