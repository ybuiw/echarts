import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import React, { useEffect, useRef } from 'react';
import * as echarts from 'echarts/core';
import { GridComponent, TooltipComponent } from 'echarts/components';
import { LineChart } from 'echarts/charts';
import { CanvasRenderer } from 'echarts/renderers';
echarts.use([GridComponent, TooltipComponent, LineChart, CanvasRenderer]);

var EChartsBar = function EChartsBar(props) {
  var _props$width = props.width,
      width = _props$width === void 0 ? '100%' : _props$width,
      _props$height = props.height,
      height = _props$height === void 0 ? '100%' : _props$height,
      _props$smooth = props.smooth,
      smooth = _props$smooth === void 0 ? false : _props$smooth,
      _props$colors = props.colors,
      colors = _props$colors === void 0 ? ['#5470c6', '#91cc75', '#fac858', '#ee6666', '#73c0de', '#3ba272', '#fc8452', '#9a60b4', '#ea7ccc'] : _props$colors,
      _props$color = props.color,
      color = _props$color === void 0 ? '#333' : _props$color,
      _props$lineColor = props.lineColor,
      lineColor = _props$lineColor === void 0 ? '#abb9d0' : _props$lineColor,
      _props$splitColor = props.splitColor,
      splitColor = _props$splitColor === void 0 ? '#e0e7f3' : _props$splitColor,
      _props$fontSize = props.fontSize,
      fontSize = _props$fontSize === void 0 ? 14 : _props$fontSize,
      _props$data = props.data,
      data = _props$data === void 0 ? [] : _props$data,
      _props$xAxis = props.xAxis,
      xAxis = _props$xAxis === void 0 ? {} : _props$xAxis,
      _props$yAxis = props.yAxis,
      yAxis = _props$yAxis === void 0 ? {} : _props$yAxis,
      _props$grid = props.grid,
      grid = _props$grid === void 0 ? {} : _props$grid,
      _props$areaStyle = props.areaStyle,
      areaStyle = _props$areaStyle === void 0 ? {} : _props$areaStyle,
      onClick = props.onClick;
  console.log(grid);
  var chartRef = useRef(null);
  var myChart = null;
  useEffect(function () {
    myChart = echarts.init(chartRef.current);
    myChart.clear();
    var _names = [];
    data.length > 0 && data.map(function (item) {
      _names.push(item.name);
    });

    var _grid = _objectSpread(_objectSpread({}, {
      top: '5%',
      bottom: '10%',
      left: '10%',
      right: '5%'
    }), grid);

    var _xAxis = {
      type: 'category',
      boundaryGap: false,
      axisLabel: {
        color: xAxis.color ? xAxis.color : color,
        fontSize: xAxis.fontSize ? xAxis.fontSize : fontSize,
        rotate: xAxis.rotate ? xAxis.rotate : 0
      },
      axisLine: {
        show: xAxis.lineColor === false ? false : true,
        lineStyle: {
          color: xAxis.lineColor ? xAxis.lineColor : lineColor
        }
      },
      axisTick: {
        show: xAxis.isTick
      },
      splitLine: {
        show: xAxis.splitColor ? true : false,
        lineStyle: {
          color: xAxis.splitColor ? xAxis.splitColor : splitColor
        }
      },
      data: _names
    };
    var _yAxis = {
      name: yAxis.name,
      type: 'value',
      axisLabel: {
        color: yAxis.color ? yAxis.color : color,
        fontSize: yAxis.fontSize ? yAxis.fontSize : fontSize
      },
      axisLine: {
        show: yAxis.lineColor === false ? false : true,
        lineStyle: {
          color: yAxis.lineColor ? yAxis.lineColor : lineColor
        }
      },
      axisTick: {
        show: false
      },
      splitLine: {
        show: yAxis.splitColor === false ? false : true,
        lineStyle: {
          color: yAxis.splitColor ? yAxis.splitColor : splitColor
        }
      }
    };

    var _areaColor;

    if (areaStyle.isGrad) {
      if (Array.isArray(areaStyle.color) && areaStyle.color.length > 1) {
        _areaColor = {
          type: 'linear',
          x: 0,
          y: 0,
          x2: 0,
          y2: 1,
          colorStops: [{
            offset: 0,
            color: areaStyle.color[0]
          }, {
            offset: 1,
            color: areaStyle.color[1]
          }],
          global: false
        };
      } else {
        _areaColor = {
          type: 'linear',
          x: 0,
          y: 0,
          x2: 0,
          y2: 1,
          colorStops: [{
            offset: 0,
            color: colors[0]
          }, {
            offset: 1,
            color: 'rgba(255,255,255,0)'
          }],
          global: false
        };
      }
    }

    myChart.setOption({
      tooltip: {
        trigger: 'axis',
        transitionDuration: 0,
        axisPointer: {
          type: 'shadow'
        }
      },
      color: colors,
      grid: _grid,
      xAxis: _xAxis,
      yAxis: _yAxis,
      series: [{
        data: data,
        type: 'line',
        smooth: smooth,
        areaStyle: areaStyle.show ? {
          color: _areaColor
        } : undefined,
        lineStyle: {
          width: 1
        }
      }]
    }, true);
    window.addEventListener("resize", myChart.resize);
    window.addEventListener('load', myChart.resize, false);
    myChart.off('click');
    myChart.on('click', function (v) {
      onClick === null || onClick === void 0 ? void 0 : onClick(v.data);
      console.log(v.data);
    });
    return function () {
      window.removeEventListener('resize', myChart.resize, false);
      window.removeEventListener('load', myChart.resize, false);
      myChart.dispose();
      myChart = null;
    };
  }, [data]);
  return /*#__PURE__*/React.createElement("div", {
    ref: chartRef,
    style: {
      'width': width,
      'height': height
    }
  });
};

export default EChartsBar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmRleC50c3giXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VFZmZlY3QiLCJ1c2VSZWYiLCJlY2hhcnRzIiwiR3JpZENvbXBvbmVudCIsIlRvb2x0aXBDb21wb25lbnQiLCJMaW5lQ2hhcnQiLCJDYW52YXNSZW5kZXJlciIsInVzZSIsIkVDaGFydHNCYXIiLCJwcm9wcyIsIndpZHRoIiwiaGVpZ2h0Iiwic21vb3RoIiwiY29sb3JzIiwiY29sb3IiLCJsaW5lQ29sb3IiLCJzcGxpdENvbG9yIiwiZm9udFNpemUiLCJkYXRhIiwieEF4aXMiLCJ5QXhpcyIsImdyaWQiLCJhcmVhU3R5bGUiLCJvbkNsaWNrIiwiY29uc29sZSIsImxvZyIsImNoYXJ0UmVmIiwibXlDaGFydCIsImluaXQiLCJjdXJyZW50IiwiY2xlYXIiLCJfbmFtZXMiLCJsZW5ndGgiLCJtYXAiLCJpdGVtIiwicHVzaCIsIm5hbWUiLCJfZ3JpZCIsInRvcCIsImJvdHRvbSIsImxlZnQiLCJyaWdodCIsIl94QXhpcyIsInR5cGUiLCJib3VuZGFyeUdhcCIsImF4aXNMYWJlbCIsInJvdGF0ZSIsImF4aXNMaW5lIiwic2hvdyIsImxpbmVTdHlsZSIsImF4aXNUaWNrIiwiaXNUaWNrIiwic3BsaXRMaW5lIiwiX3lBeGlzIiwiX2FyZWFDb2xvciIsImlzR3JhZCIsIkFycmF5IiwiaXNBcnJheSIsIngiLCJ5IiwieDIiLCJ5MiIsImNvbG9yU3RvcHMiLCJvZmZzZXQiLCJnbG9iYWwiLCJzZXRPcHRpb24iLCJ0b29sdGlwIiwidHJpZ2dlciIsInRyYW5zaXRpb25EdXJhdGlvbiIsImF4aXNQb2ludGVyIiwic2VyaWVzIiwidW5kZWZpbmVkIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlc2l6ZSIsIm9mZiIsIm9uIiwidiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkaXNwb3NlIl0sIm1hcHBpbmdzIjoiO0FBQUEsT0FBT0EsS0FBUCxJQUFnQkMsU0FBaEIsRUFBMkJDLE1BQTNC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SUFBZDtBQUNELEtBSEQ7QUFJQSxXQUFPLFlBQU07QUFDWHNELE1BQUFBLE1BQU0sQ0FBQ00sbUJBQVAsQ0FBMkIsUUFBM0IsRUFBcUNuRCxPQUFPLENBQUMrQyxNQUE3QyxFQUFxRCxLQUFyRDtBQUNBRixNQUFBQSxNQUFNLENBQUNNLG1CQUFQLENBQTJCLE1BQTNCLEVBQW1DbkQsT0FBTyxDQUFDK0MsTUFBM0MsRUFBbUQsS0FBbkQ7QUFDQS9DLE1BQUFBLE9BQU8sQ0FBQ29ELE9BQVI7QUFDQXBELE1BQUFBLE9BQU8sR0FBRyxJQUFWO0FBQ0QsS0FMRDtBQU1ELEdBcElRLEVBb0lOLENBQUNULElBQUQsQ0FwSU0sQ0FBVDtBQXNJQSxzQkFDRTtBQUFLLElBQUEsR0FBRyxFQUFFUSxRQUFWO0FBQXFCLElBQUEsS0FBSyxFQUFFO0FBQzFCLGVBQVNoQixLQURpQjtBQUUxQixnQkFBVUM7QUFGZ0I7QUFBNUIsSUFERjtBQU1ELENBbEtEOztBQW9LQSxlQUFlSCxVQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgKiBhcyBlY2hhcnRzIGZyb20gJ2VjaGFydHMvY29yZSc7XG5pbXBvcnQgeyBHcmlkQ29tcG9uZW50LCBUb29sdGlwQ29tcG9uZW50LCBHcmlkQ29tcG9uZW50T3B0aW9uIH0gZnJvbSAnZWNoYXJ0cy9jb21wb25lbnRzJztcbmltcG9ydCB7IExpbmVDaGFydCB9IGZyb20gJ2VjaGFydHMvY2hhcnRzJztcbmltcG9ydCB7IENhbnZhc1JlbmRlcmVyIH0gZnJvbSAnZWNoYXJ0cy9yZW5kZXJlcnMnO1xuXG5lY2hhcnRzLnVzZShcbiAgW0dyaWRDb21wb25lbnQsIFRvb2x0aXBDb21wb25lbnQsIExpbmVDaGFydCwgQ2FudmFzUmVuZGVyZXJdXG4pO1xuXG5pbnRlcmZhY2UgeEF4aXNQcm9wcyB7XG4gIGNvbG9yPzogc3RyaW5nO1xuICBmb250U2l6ZT86IG51bWJlcjtcbiAgbGluZUNvbG9yPzogc3RyaW5nIHwgYm9vbGVhbjtcbiAgc3BsaXRDb2xvcj86IHN0cmluZyB8IGJvb2xlYW47XG4gIHJvdGF0ZT86IG51bWJlcjtcbiAgaXNUaWNrPzogYm9vbGVhbjtcbn1cblxuaW50ZXJmYWNlIHlBeGlzUHJvcHMge1xuICBuYW1lPzogc3RyaW5nO1xuICBjb2xvcj86IHN0cmluZztcbiAgZm9udFNpemU/OiBudW1iZXI7XG4gIGxpbmVDb2xvcj86IHN0cmluZyB8IGJvb2xlYW47XG4gIHNwbGl0Q29sb3I/OiBzdHJpbmcgfCBib29sZWFuO1xufVxuXG5pbnRlcmZhY2UgYXJlYVN0eWxlUHJvcHMge1xuICBzaG93PzogYm9vbGVhbjtcbiAgaXNHcmFkPzogYm9vbGVhbjtcbiAgY29sb3I/OiBzdHJpbmdbXVxufVxuXG5pbnRlcmZhY2UgTGluZUJhc2VQcm9wcyB7XG4gIGRhdGE/OiBhbnlbXTtcbiAgd2lkdGg/OiBzdHJpbmc7XG4gIGhlaWdodD86IHN0cmluZztcbiAgLyoqIOaYr+WQpuW5s+a7keabsue6v+aYvuekuiAqL1xuICBzbW9vdGg/OiBib29sZWFuO1xuICAvKiog5a2X5L2T6aKc6ImyICovXG4gIGNvbG9yPzogc3RyaW5nO1xuICAvKiogeCwgeei9tOi9tOe6v+e6v+adoeminOiJsiAqL1xuICBsaW5lQ29sb3I/OiBzdHJpbmc7XG4gIC8qKiB4LCB56L20572R5qC857q/5p2h6aKc6ImyICovXG4gIHNwbGl0Q29sb3I/OiBzdHJpbmc7XG4gIC8qKiDlrZfkvZPlpKflsI/vvIzpu5jorqQxNOWDj+e0oCAqL1xuICBmb250U2l6ZT86IG51bWJlciB8IHN0cmluZztcbiAgLyoqIOaKmOe6v+minOiJsiAqL1xuICBjb2xvcnM/OiBzdHJpbmdbXTtcbiAgLyoqIOWMuuWfn+Whq+WFheagt+W8jyAqL1xuICBhcmVhU3R5bGU/OiBhcmVhU3R5bGVQcm9wcztcbiAgLyoqXG4gICAqIFgg6L206YWN572uXG4gICAqIEBjb2xvciDmloflrZfpopzoibJcbiAgICogQHNpemUg5paH5a2X5aSn5bCPXG4gICAqIEBsaW5lQ29sb3IgeOi9tOi9tOe6v+e6v+adoeminOiJsiwgZmFsc2Ug5YiZ5LiN5pi+56S6XG4gICAqIEBzcGxpdENvbG9yIHjovbTnvZHmoLznur/mnaHpopzoibIsIGZhbHNlIOWImeS4jeaYvuekuiwg6buY6K6kdHJ1ZVxuICAgKiBAcm90YXRlIOWIu+W6puagh+etvuaXi+i9rOinkuW6plxuICAgKiBAaXNUaWNrIOaYr+WQpuaYvuekuuWdkOagh+i9tOWIu+W6plxuICAgKi9cbiAgeEF4aXM/OiB4QXhpc1Byb3BzO1xuICAvKipcbiAgICogeSDovbTphY3nva5cbiAgICogQG5hbWUg5Z2Q5qCH6L205ZCN56ewXG4gICAqIEBjb2xvciDmloflrZfpopzoibJcbiAgICogQHNpemUg5paH5a2X5aSn5bCPXG4gICAqIEBsaW5lQ29sb3Igeei9tOi9tOe6v+e6v+adoeminOiJsiwgZmFsc2Ug5YiZ5LiN5pi+56S6XG4gICAqIEBzcGxpdENvbG9yIHnovbTnvZHmoLznur/mnaHpopzoibIsIGZhbHNlIOWImeS4jeaYvuekuiwg6buY6K6kZmFsc2VcbiAgICovXG4gIHlBeGlzPzogeUF4aXNQcm9wcztcbiAgZ3JpZD86IEdyaWRDb21wb25lbnRPcHRpb247XG4gIG9uQ2xpY2s/OiAodjogYW55KSA9PiB2b2lkO1xufVxuXG5jb25zdCBFQ2hhcnRzQmFyID0gKHByb3BzOiBMaW5lQmFzZVByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICB3aWR0aCA9ICcxMDAlJyxcbiAgICBoZWlnaHQgPSAnMTAwJScsXG4gICAgc21vb3RoID0gZmFsc2UsXG4gICAgY29sb3JzID0gWycjNTQ3MGM2JywgJyM5MWNjNzUnLCAnI2ZhYzg1OCcsICcjZWU2NjY2JywgJyM3M2MwZGUnLCAnIzNiYTI3MicsICcjZmM4NDUyJywgJyM5YTYwYjQnLCAnI2VhN2NjYyddLFxuICAgIGNvbG9yID0gJyMzMzMnLFxuICAgIGxpbmVDb2xvciA9ICcjYWJiOWQwJyxcbiAgICBzcGxpdENvbG9yID0gJyNlMGU3ZjMnLFxuICAgIGZvbnRTaXplID0gMTQsXG4gICAgZGF0YSA9IFtdLFxuICAgIHhBeGlzID0ge30sXG4gICAgeUF4aXMgPSB7fSxcbiAgICBncmlkID0ge30sXG4gICAgYXJlYVN0eWxlID0ge30sXG4gICAgb25DbGlja1xuICB9ID0gcHJvcHM7XG5cbiAgY29uc29sZS5sb2coZ3JpZClcblxuICBjb25zdCBjaGFydFJlZiA9IHVzZVJlZjxhbnk+KG51bGwpXG4gIGxldCBteUNoYXJ0OiBhbnkgPSBudWxsO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIG15Q2hhcnQgPSBlY2hhcnRzLmluaXQoY2hhcnRSZWYuY3VycmVudCk7XG4gICAgbXlDaGFydC5jbGVhcigpO1xuICAgIGNvbnN0IF9uYW1lczogc3RyaW5nW10gPSBbXTtcbiAgICBkYXRhLmxlbmd0aCA+IDAgJiYgZGF0YS5tYXAoKGl0ZW06IGFueSkgPT4ge1xuICAgICAgX25hbWVzLnB1c2goaXRlbS5uYW1lKTtcbiAgICB9KVxuICAgIGNvbnN0IF9ncmlkOiBHcmlkQ29tcG9uZW50T3B0aW9uID0gey4uLntcbiAgICAgIHRvcDogJzUlJyxcbiAgICAgIGJvdHRvbTogJzEwJScsXG4gICAgICBsZWZ0OiAnMTAlJyxcbiAgICAgIHJpZ2h0OiAnNSUnLFxuICAgIH0sIC4uLmdyaWR9O1xuICAgIGNvbnN0IF94QXhpczogYW55ID0ge1xuICAgICAgdHlwZTogJ2NhdGVnb3J5JyxcbiAgICAgIGJvdW5kYXJ5R2FwOiBmYWxzZSxcbiAgICAgIGF4aXNMYWJlbDoge1xuICAgICAgICBjb2xvcjogeEF4aXMuY29sb3IgPyB4QXhpcy5jb2xvciA6IGNvbG9yLFxuICAgICAgICBmb250U2l6ZTogeEF4aXMuZm9udFNpemUgPyB4QXhpcy5mb250U2l6ZSA6IGZvbnRTaXplLFxuICAgICAgICByb3RhdGU6IHhBeGlzLnJvdGF0ZSA/IHhBeGlzLnJvdGF0ZSA6IDAsXG4gICAgICB9LFxuICAgICAgYXhpc0xpbmU6IHtcbiAgICAgICAgc2hvdzogeEF4aXMubGluZUNvbG9yID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZSxcbiAgICAgICAgbGluZVN0eWxlOiB7XG4gICAgICAgICAgY29sb3I6IHhBeGlzLmxpbmVDb2xvciA/IHhBeGlzLmxpbmVDb2xvciA6IGxpbmVDb2xvcixcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGF4aXNUaWNrOiB7XG4gICAgICAgIHNob3c6IHhBeGlzLmlzVGljayxcbiAgICAgIH0sXG4gICAgICBzcGxpdExpbmU6IHtcbiAgICAgICAgc2hvdzogeEF4aXMuc3BsaXRDb2xvciA/IHRydWUgOiBmYWxzZSxcbiAgICAgICAgbGluZVN0eWxlOiB7XG4gICAgICAgICAgY29sb3I6IHhBeGlzLnNwbGl0Q29sb3IgPyB4QXhpcy5zcGxpdENvbG9yIDogc3BsaXRDb2xvcixcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRhdGE6IF9uYW1lc1xuICAgIH1cbiAgICBjb25zdCBfeUF4aXM6IGFueSA9IHtcbiAgICAgIG5hbWU6IHlBeGlzLm5hbWUsXG4gICAgICB0eXBlOiAndmFsdWUnLFxuICAgICAgYXhpc0xhYmVsOiB7XG4gICAgICAgIGNvbG9yOiB5QXhpcy5jb2xvciA/IHlBeGlzLmNvbG9yIDogY29sb3IsXG4gICAgICAgIGZvbnRTaXplOiB5QXhpcy5mb250U2l6ZSA/IHlBeGlzLmZvbnRTaXplIDogZm9udFNpemUsXG4gICAgICB9LFxuICAgICAgYXhpc0xpbmU6IHtcbiAgICAgICAgc2hvdzogeUF4aXMubGluZUNvbG9yID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZSxcbiAgICAgICAgbGluZVN0eWxlOiB7XG4gICAgICAgICAgY29sb3I6IHlBeGlzLmxpbmVDb2xvciA/IHlBeGlzLmxpbmVDb2xvciA6IGxpbmVDb2xvcixcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBheGlzVGljazoge1xuICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgIH0sXG4gICAgICBzcGxpdExpbmU6IHtcbiAgICAgICAgc2hvdzogeUF4aXMuc3BsaXRDb2xvciA9PT0gZmFsc2UgPyBmYWxzZSA6IHRydWUsXG4gICAgICAgIGxpbmVTdHlsZToge1xuICAgICAgICAgIGNvbG9yOiB5QXhpcy5zcGxpdENvbG9yID8geUF4aXMuc3BsaXRDb2xvciA6IHNwbGl0Q29sb3IsXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfVxuICAgIGxldCBfYXJlYUNvbG9yOiBhbnk7XG4gICAgaWYgKGFyZWFTdHlsZS5pc0dyYWQpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZWFTdHlsZS5jb2xvcikgJiYgYXJlYVN0eWxlLmNvbG9yLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgX2FyZWFDb2xvciA9IHtcbiAgICAgICAgICB0eXBlOiAnbGluZWFyJyxcbiAgICAgICAgICB4OiAwLFxuICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgeDI6IDAsXG4gICAgICAgICAgeTI6IDEsXG4gICAgICAgICAgY29sb3JTdG9wczogW3tcbiAgICAgICAgICAgIG9mZnNldDogMCwgY29sb3I6IGFyZWFTdHlsZS5jb2xvclswXVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgb2Zmc2V0OiAxLCBjb2xvcjogYXJlYVN0eWxlLmNvbG9yWzFdXG4gICAgICAgICAgfV0sXG4gICAgICAgICAgZ2xvYmFsOiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfYXJlYUNvbG9yID0ge1xuICAgICAgICAgIHR5cGU6ICdsaW5lYXInLFxuICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgeTogMCxcbiAgICAgICAgICB4MjogMCxcbiAgICAgICAgICB5MjogMSxcbiAgICAgICAgICBjb2xvclN0b3BzOiBbe1xuICAgICAgICAgICAgb2Zmc2V0OiAwLCBjb2xvcjogY29sb3JzWzBdXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgb2Zmc2V0OiAxLCBjb2xvcjogJ3JnYmEoMjU1LDI1NSwyNTUsMCknXG4gICAgICAgICAgfV0sXG4gICAgICAgICAgZ2xvYmFsOiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIG15Q2hhcnQuc2V0T3B0aW9uKHtcbiAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgdHJpZ2dlcjogJ2F4aXMnLFxuICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb246IDAsXG4gICAgICAgIGF4aXNQb2ludGVyOiB7XG4gICAgICAgICAgdHlwZTogJ3NoYWRvdydcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNvbG9yOiBjb2xvcnMsXG4gICAgICBncmlkOiBfZ3JpZCxcbiAgICAgIHhBeGlzOiBfeEF4aXMsXG4gICAgICB5QXhpczogX3lBeGlzLFxuICAgICAgc2VyaWVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgIHR5cGU6ICdsaW5lJyxcbiAgICAgICAgICBzbW9vdGg6IHNtb290aCxcbiAgICAgICAgICBhcmVhU3R5bGU6IGFyZWFTdHlsZS5zaG93ID8ge1xuICAgICAgICAgICAgY29sb3I6IF9hcmVhQ29sb3JcbiAgICAgICAgICB9IDogdW5kZWZpbmVkLFxuICAgICAgICAgIGxpbmVTdHlsZToge1xuICAgICAgICAgICAgd2lkdGg6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LCB0cnVlKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBteUNoYXJ0LnJlc2l6ZSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBteUNoYXJ0LnJlc2l6ZSwgZmFsc2UpO1xuICAgIG15Q2hhcnQub2ZmKCdjbGljaycpO1xuICAgIG15Q2hhcnQub24oJ2NsaWNrJywgKHY6IGFueSkgPT4ge1xuICAgICAgb25DbGljaz8uKHYuZGF0YSk7XG4gICAgICBjb25zb2xlLmxvZyh2LmRhdGEpXG4gICAgfSlcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG15Q2hhcnQucmVzaXplLCBmYWxzZSk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZCcsIG15Q2hhcnQucmVzaXplLCBmYWxzZSk7XG4gICAgICBteUNoYXJ0LmRpc3Bvc2UoKTtcbiAgICAgIG15Q2hhcnQgPSBudWxsO1xuICAgIH1cbiAgfSwgW2RhdGFdKVxuICBcbiAgcmV0dXJuIChcbiAgICA8ZGl2IHJlZj17Y2hhcnRSZWZ9ICBzdHlsZT17e1xuICAgICAgJ3dpZHRoJzogd2lkdGgsXG4gICAgICAnaGVpZ2h0JzogaGVpZ2h0IH19PlxuICAgIDwvZGl2PlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEVDaGFydHNCYXI7Il19