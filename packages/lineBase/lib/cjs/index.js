"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _react = _interopRequireWildcard(require("react"));

var echarts = _interopRequireWildcard(require("echarts/core"));

var _components = require("echarts/components");

var _charts = require("echarts/charts");

var _renderers = require("echarts/renderers");

echarts.use([_components.GridComponent, _components.TooltipComponent, _charts.LineChart, _renderers.CanvasRenderer]);

var EChartsBar = function EChartsBar(props) {
  var _props$width = props.width,
      width = _props$width === void 0 ? '100%' : _props$width,
      _props$height = props.height,
      height = _props$height === void 0 ? '100%' : _props$height,
      _props$smooth = props.smooth,
      smooth = _props$smooth === void 0 ? false : _props$smooth,
      _props$colors = props.colors,
      colors = _props$colors === void 0 ? ['#5470c6', '#91cc75', '#fac858', '#ee6666', '#73c0de', '#3ba272', '#fc8452', '#9a60b4', '#ea7ccc'] : _props$colors,
      _props$color = props.color,
      color = _props$color === void 0 ? '#333' : _props$color,
      _props$lineColor = props.lineColor,
      lineColor = _props$lineColor === void 0 ? '#abb9d0' : _props$lineColor,
      _props$splitColor = props.splitColor,
      splitColor = _props$splitColor === void 0 ? '#e0e7f3' : _props$splitColor,
      _props$fontSize = props.fontSize,
      fontSize = _props$fontSize === void 0 ? 14 : _props$fontSize,
      _props$data = props.data,
      data = _props$data === void 0 ? [] : _props$data,
      _props$xAxis = props.xAxis,
      xAxis = _props$xAxis === void 0 ? {} : _props$xAxis,
      _props$yAxis = props.yAxis,
      yAxis = _props$yAxis === void 0 ? {} : _props$yAxis,
      _props$grid = props.grid,
      grid = _props$grid === void 0 ? {} : _props$grid,
      _props$areaStyle = props.areaStyle,
      areaStyle = _props$areaStyle === void 0 ? {} : _props$areaStyle,
      onClick = props.onClick;
  console.log(grid);
  var chartRef = (0, _react.useRef)(null);
  var myChart = null;
  (0, _react.useEffect)(function () {
    myChart = echarts.init(chartRef.current);
    myChart.clear();
    var _names = [];
    data.length > 0 && data.map(function (item) {
      _names.push(item.name);
    });

    var _grid = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, {
      top: '5%',
      bottom: '10%',
      left: '10%',
      right: '5%'
    }), grid);

    var _xAxis = {
      type: 'category',
      boundaryGap: false,
      axisLabel: {
        color: xAxis.color ? xAxis.color : color,
        fontSize: xAxis.fontSize ? xAxis.fontSize : fontSize,
        rotate: xAxis.rotate ? xAxis.rotate : 0
      },
      axisLine: {
        show: xAxis.lineColor === false ? false : true,
        lineStyle: {
          color: xAxis.lineColor ? xAxis.lineColor : lineColor
        }
      },
      axisTick: {
        show: xAxis.isTick
      },
      splitLine: {
        show: xAxis.splitColor ? true : false,
        lineStyle: {
          color: xAxis.splitColor ? xAxis.splitColor : splitColor
        }
      },
      data: _names
    };
    var _yAxis = {
      name: yAxis.name,
      type: 'value',
      axisLabel: {
        color: yAxis.color ? yAxis.color : color,
        fontSize: yAxis.fontSize ? yAxis.fontSize : fontSize
      },
      axisLine: {
        show: yAxis.lineColor === false ? false : true,
        lineStyle: {
          color: yAxis.lineColor ? yAxis.lineColor : lineColor
        }
      },
      axisTick: {
        show: false
      },
      splitLine: {
        show: yAxis.splitColor === false ? false : true,
        lineStyle: {
          color: yAxis.splitColor ? yAxis.splitColor : splitColor
        }
      }
    };

    var _areaColor;

    if (areaStyle.isGrad) {
      if (Array.isArray(areaStyle.color) && areaStyle.color.length > 1) {
        _areaColor = {
          type: 'linear',
          x: 0,
          y: 0,
          x2: 0,
          y2: 1,
          colorStops: [{
            offset: 0,
            color: areaStyle.color[0]
          }, {
            offset: 1,
            color: areaStyle.color[1]
          }],
          global: false
        };
      } else {
        _areaColor = {
          type: 'linear',
          x: 0,
          y: 0,
          x2: 0,
          y2: 1,
          colorStops: [{
            offset: 0,
            color: colors[0]
          }, {
            offset: 1,
            color: 'rgba(255,255,255,0)'
          }],
          global: false
        };
      }
    }

    myChart.setOption({
      tooltip: {
        trigger: 'axis',
        transitionDuration: 0,
        axisPointer: {
          type: 'shadow'
        }
      },
      color: colors,
      grid: _grid,
      xAxis: _xAxis,
      yAxis: _yAxis,
      series: [{
        data: data,
        type: 'line',
        smooth: smooth,
        areaStyle: areaStyle.show ? {
          color: _areaColor
        } : undefined,
        lineStyle: {
          width: 1
        }
      }]
    }, true);
    window.addEventListener("resize", myChart.resize);
    window.addEventListener('load', myChart.resize, false);
    myChart.off('click');
    myChart.on('click', function (v) {
      onClick === null || onClick === void 0 ? void 0 : onClick(v.data);
      console.log(v.data);
    });
    return function () {
      window.removeEventListener('resize', myChart.resize, false);
      window.removeEventListener('load', myChart.resize, false);
      myChart.dispose();
      myChart = null;
    };
  }, [data]);
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: chartRef,
    style: {
      'width': width,
      'height': height
    }
  });
};

var _default = EChartsBar;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,