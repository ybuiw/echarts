"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var echarts = _interopRequireWildcard(require("echarts/core"));

var _components = require("echarts/components");

var _charts = require("echarts/charts");

var _renderers = require("echarts/renderers");

echarts.use([_components.GridComponent, _components.TooltipComponent, _charts.LineChart, _renderers.CanvasRenderer]);

var EChartsLine = function EChartsLine(props) {
  var _props$width = props.width,
      width = _props$width === void 0 ? '100%' : _props$width,
      _props$height = props.height,
      height = _props$height === void 0 ? '100%' : _props$height,
      _props$smooth = props.smooth,
      smooth = _props$smooth === void 0 ? false : _props$smooth,
      _props$colors = props.colors,
      colors = _props$colors === void 0 ? ['#5470c6', '#91cc75', '#fac858', '#ee6666', '#73c0de', '#3ba272', '#fc8452', '#9a60b4', '#ea7ccc'] : _props$colors,
      _props$color = props.color,
      color = _props$color === void 0 ? '#333' : _props$color,
      _props$lineColor = props.lineColor,
      lineColor = _props$lineColor === void 0 ? '#abb9d0' : _props$lineColor,
      _props$splitColor = props.splitColor,
      splitColor = _props$splitColor === void 0 ? '#e0e7f3' : _props$splitColor,
      _props$fontSize = props.fontSize,
      fontSize = _props$fontSize === void 0 ? 14 : _props$fontSize,
      _props$data = props.data,
      data = _props$data === void 0 ? [] : _props$data,
      _props$xAxis = props.xAxis,
      xAxis = _props$xAxis === void 0 ? {} : _props$xAxis,
      _props$yAxis = props.yAxis,
      yAxis = _props$yAxis === void 0 ? {} : _props$yAxis,
      _props$grid = props.grid,
      grid = _props$grid === void 0 ? {} : _props$grid,
      _props$areaStyle = props.areaStyle,
      areaStyle = _props$areaStyle === void 0 ? {} : _props$areaStyle,
      _props$isSwitch = props.isSwitch,
      isSwitch = _props$isSwitch === void 0 ? false : _props$isSwitch,
      _props$switchTime = props.switchTime,
      switchTime = _props$switchTime === void 0 ? 2000 : _props$switchTime,
      onClick = props.onClick;
  var chartRef = (0, _react.useRef)(null);

  var _useState = (0, _react.useState)(null),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      myChart = _useState2[0],
      setMyChart = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 1),
      isHigh = _useState4[0];

  var _useState5 = (0, _react.useState)(0),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      highIndex = _useState6[0],
      setHighIndex = _useState6[1];

  (0, _react.useEffect)(function () {
    var _myChart = echarts.init(chartRef.current);

    setMyChart(_myChart);
    window.addEventListener("resize", _myChart.resize, false);
    window.addEventListener('load', _myChart.resize, false);

    _myChart.off('click');

    _myChart.on('click', function (v) {
      onClick === null || onClick === void 0 ? void 0 : onClick(v.data);
      console.log(v.data);
    });

    return function () {
      console.log(2);
      window.removeEventListener('resize', _myChart.resize, false);
      window.removeEventListener('load', _myChart.resize, false);

      _myChart.dispose();
    };
  }, []);
  (0, _react.useEffect)(function () {
    if (myChart) {
      myChart.clear();
      var _names = [];
      data.length > 0 && data.map(function (item) {
        _names.push(item.name);
      });

      var _grid = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, {
        top: '5%',
        bottom: '10%',
        left: '10%',
        right: '5%'
      }), grid);

      var _xAxis = {
        type: 'category',
        boundaryGap: false,
        axisLabel: {
          color: xAxis.color ? xAxis.color : color,
          fontSize: xAxis.fontSize ? xAxis.fontSize : fontSize,
          rotate: xAxis.rotate ? xAxis.rotate : 0
        },
        axisLine: {
          show: xAxis.lineColor === false ? false : true,
          lineStyle: {
            color: xAxis.lineColor ? xAxis.lineColor : lineColor
          }
        },
        axisTick: {
          show: xAxis.isTick
        },
        splitLine: {
          show: xAxis.splitColor ? true : false,
          lineStyle: {
            color: xAxis.splitColor ? xAxis.splitColor : splitColor
          }
        },
        data: _names
      };
      var _yAxis = {
        name: yAxis.name,
        type: 'value',
        axisLabel: {
          color: yAxis.color ? yAxis.color : color,
          fontSize: yAxis.fontSize ? yAxis.fontSize : fontSize
        },
        axisLine: {
          show: yAxis.lineColor === false ? false : true,
          lineStyle: {
            color: yAxis.lineColor ? yAxis.lineColor : lineColor
          }
        },
        axisTick: {
          show: false
        },
        splitLine: {
          show: yAxis.splitColor === false ? false : true,
          lineStyle: {
            color: yAxis.splitColor ? yAxis.splitColor : splitColor
          }
        }
      };

      var _areaColor;

      if (areaStyle.isGrad) {
        if (Array.isArray(areaStyle.color) && areaStyle.color.length > 1) {
          _areaColor = {
            type: 'linear',
            x: 0,
            y: 0,
            x2: 0,
            y2: 1,
            colorStops: [{
              offset: 0,
              color: areaStyle.color[0]
            }, {
              offset: 1,
              color: areaStyle.color[1]
            }],
            global: false
          };
        } else {
          _areaColor = {
            type: 'linear',
            x: 0,
            y: 0,
            x2: 0,
            y2: 1,
            colorStops: [{
              offset: 0,
              color: colors[0]
            }, {
              offset: 1,
              color: 'rgba(255,255,255,0)'
            }],
            global: false
          };
        }
      }

      myChart.setOption({
        tooltip: {
          trigger: 'axis',
          transitionDuration: 0,
          enterable: true,
          axisPointer: {
            type: 'shadow'
          }
        },
        color: colors,
        grid: _grid,
        xAxis: _xAxis,
        yAxis: _yAxis,
        series: [{
          data: data,
          type: 'line',
          smooth: smooth,
          areaStyle: areaStyle.show ? {
            color: _areaColor
          } : undefined,
          lineStyle: {
            width: 1
          }
        }]
      }, true);
    }
  }, [myChart, data]);
  (0, _react.useEffect)(function () {
    var faultByHourTime;

    if (myChart && isSwitch && !isHigh && data.length > 0) {
      faultByHourTime = setInterval(function () {
        setHighIndex(function (n) {
          myChart.dispatchAction({
            type: 'showTip',
            seriesIndex: 0,
            dataIndex: n
          });

          if (n >= data.length - 1) {
            return 0;
          } else {
            return n + 1;
          }
        });
      }, switchTime);
    }

    return function () {
      clearInterval(faultByHourTime);
    };
  }, [myChart, isSwitch, isHigh, data]);
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: chartRef,
    style: {
      'width': width,
      'height': height
    }
  });
};

var _default = EChartsLine;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmRleC50c3giXSwibmFtZXMiOlsiZWNoYXJ0cyIsInVzZSIsIkdyaWRDb21wb25lbnQiLCJUb29sdGlwQ29tcG9uZW50IiwiTGluZUNoYXJ0IiwiQ2FudmFzUmVuZGVyZXIiLCJFQ2hhcnRzTGluZSIsInByb3BzIiwid2lkdGgiLCJoZWlnaHQiLCJzbW9vdGgiLCJjb2xvcnMiLCJjb2xvciIsImxpbmVDb2xvciIsInNwbGl0Q29sb3IiLCJmb250U2l6ZSIsImRhdGEiLCJ4QXhpcyIsInlBeGlzIiwiZ3JpZCIsImFyZWFTdHlsZSIsImlzU3dpdGNoIiwic3dpdGNoVGltZSIsIm9uQ2xpY2siLCJjaGFydFJlZiIsIm15Q2hhcnQiLCJzZXRNeUNoYXJ0IiwiaXNIaWdoIiwiaGlnaEluZGV4Iiwic2V0SGlnaEluZGV4IiwiX215Q2hhcnQiLCJpbml0IiwiY3VycmVudCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZXNpemUiLCJvZmYiLCJvbiIsInYiLCJjb25zb2xlIiwibG9nIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRpc3Bvc2UiLCJjbGVhciIsIl9uYW1lcyIsImxlbmd0aCIsIm1hcCIsIml0ZW0iLCJwdXNoIiwibmFtZSIsIl9ncmlkIiwidG9wIiwiYm90dG9tIiwibGVmdCIsInJpZ2h0IiwiX3hBeGlzIiwidHlwZSIsImJvdW5kYXJ5R2FwIiwiYXhpc0xhYmVsIiwicm90YXRlIiwiYXhpc0xpbmUiLCJzaG93IiwibGluZVN0eWxlIiwiYXhpc1RpY2siLCJpc1RpY2siLCJzcGxpdExpbmUiLCJfeUF4aXMiLCJfYXJlYUNvbG9yIiwiaXNHcmFkIiwiQXJyYXkiLCJpc0FycmF5IiwieCIsInkiLCJ4MiIsInkyIiwiY29sb3JTdG9wcyIsIm9mZnNldCIsImdsb2JhbCIsInNldE9wdGlvbiIsInRvb2x0aXAiLCJ0cmlnZ2VyIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiZW50ZXJhYmxlIiwiYXhpc1BvaW50ZXIiLCJzZXJpZXMiLCJ1bmRlZmluZWQiLCJmYXVsdEJ5SG91clRpbWUiLCJzZXRJbnRlcnZhbCIsIm4iLCJkaXNwYXRjaEFjdGlvbiIsInNlcmllc0luZGV4IiwiZGF0YUluZGV4IiwiY2xlYXJJbnRlcnZhbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUNFLENBQUNDLHlCQUFELEVBQWdCQyw0QkFBaEIsRUFBa0NDLGlCQUFsQyxFQUE2Q0MseUJBQTdDLENBREY7O0FBd0VBLElBQU1DLFdBQVcsR0FBRyxTQUFkQSxXQUFjLENBQUNDLEtBQUQsRUFBMEI7QUFDNUMscUJBaUJJQSxLQWpCSixDQUNFQyxLQURGO0FBQUEsTUFDRUEsS0FERiw2QkFDVSxNQURWO0FBQUEsc0JBaUJJRCxLQWpCSixDQUVFRSxNQUZGO0FBQUEsTUFFRUEsTUFGRiw4QkFFVyxNQUZYO0FBQUEsc0JBaUJJRixLQWpCSixDQUdFRyxNQUhGO0FBQUEsTUFHRUEsTUFIRiw4QkFHVyxLQUhYO0FBQUEsc0JBaUJJSCxLQWpCSixDQUlFSSxNQUpGO0FBQUEsTUFJRUEsTUFKRiw4QkFJVyxDQUFDLFNBQUQsRUFBWSxTQUFaLEVBQXVCLFNBQXZCLEVBQWtDLFNBQWxDLEVBQTZDLFNBQTdDLEVBQXdELFNBQXhELEVBQW1FLFNBQW5FLEVBQThFLFNBQTlFLEVBQXlGLFNBQXpGLENBSlg7QUFBQSxxQkFpQklKLEtBakJKLENBS0VLLEtBTEY7QUFBQSxNQUtFQSxLQUxGLDZCQUtVLE1BTFY7QUFBQSx5QkFpQklMLEtBakJKLENBTUVNLFNBTkY7QUFBQSxNQU1FQSxTQU5GLGlDQU1jLFNBTmQ7QUFBQSwwQkFpQklOLEtBakJKLENBT0VPLFVBUEY7QUFBQSxNQU9FQSxVQVBGLGtDQU9lLFNBUGY7QUFBQSx3QkFpQklQLEtBakJKLENBUUVRLFFBUkY7QUFBQSxNQVFFQSxRQVJGLGdDQVFhLEVBUmI7QUFBQSxvQkFpQklSLEtBakJKLENBU0VTLElBVEY7QUFBQSxN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UyxFQUFFSDtBQUhVLFdBQXZCOztBQUtBLGNBQUlBLENBQUMsSUFBSXhFLElBQUksQ0FBQzZCLE1BQUwsR0FBYyxDQUF2QixFQUEwQjtBQUN4QixtQkFBTyxDQUFQO0FBQ0QsV0FGRCxNQUVPO0FBQ0wsbUJBQU8yQyxDQUFDLEdBQUcsQ0FBWDtBQUNEO0FBQ0YsU0FYVyxDQUFaO0FBWUQsT0FiNEIsRUFhMUJsRSxVQWIwQixDQUE3QjtBQWNEOztBQUNELFdBQU8sWUFBTTtBQUNYc0UsTUFBQUEsYUFBYSxDQUFDTixlQUFELENBQWI7QUFDRCxLQUZEO0FBR0QsR0FyQkQsRUFxQkcsQ0FBQzdELE9BQUQsRUFBVUosUUFBVixFQUFvQk0sTUFBcEIsRUFBNEJYLElBQTVCLENBckJIO0FBdUJBLHNCQUNFO0FBQUssSUFBQSxHQUFHLEVBQUVRLFFBQVY7QUFDRSxJQUFBLEtBQUssRUFBRTtBQUNMLGVBQVNoQixLQURKO0FBRUwsZ0JBQVVDO0FBRkw7QUFEVCxJQURGO0FBUUQsQ0F2TUQ7O2VBeU1lSCxXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCAqIGFzIGVjaGFydHMgZnJvbSAnZWNoYXJ0cy9jb3JlJztcclxuaW1wb3J0IHsgR3JpZENvbXBvbmVudCwgVG9vbHRpcENvbXBvbmVudCwgR3JpZENvbXBvbmVudE9wdGlvbiB9IGZyb20gJ2VjaGFydHMvY29tcG9uZW50cyc7XHJcbmltcG9ydCB7IExpbmVDaGFydCB9IGZyb20gJ2VjaGFydHMvY2hhcnRzJztcclxuaW1wb3J0IHsgQ2FudmFzUmVuZGVyZXIgfSBmcm9tICdlY2hhcnRzL3JlbmRlcmVycyc7XHJcblxyXG5lY2hhcnRzLnVzZShcclxuICBbR3JpZENvbXBvbmVudCwgVG9vbHRpcENvbXBvbmVudCwgTGluZUNoYXJ0LCBDYW52YXNSZW5kZXJlcl1cclxuKTtcclxuXHJcbmludGVyZmFjZSB4QXhpc1Byb3BzIHtcclxuICBjb2xvcj86IHN0cmluZztcclxuICBmb250U2l6ZT86IG51bWJlcjtcclxuICBsaW5lQ29sb3I/OiBzdHJpbmcgfCBib29sZWFuO1xyXG4gIHNwbGl0Q29sb3I/OiBzdHJpbmcgfCBib29sZWFuO1xyXG4gIHJvdGF0ZT86IG51bWJlcjtcclxuICBpc1RpY2s/OiBib29sZWFuO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgeUF4aXNQcm9wcyB7XHJcbiAgbmFtZT86IHN0cmluZztcclxuICBjb2xvcj86IHN0cmluZztcclxuICBmb250U2l6ZT86IG51bWJlcjtcclxuICBsaW5lQ29sb3I/OiBzdHJpbmcgfCBib29sZWFuO1xyXG4gIHNwbGl0Q29sb3I/OiBzdHJpbmcgfCBib29sZWFuO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgYXJlYVN0eWxlUHJvcHMge1xyXG4gIHNob3c/OiBib29sZWFuO1xyXG4gIGlzR3JhZD86IGJvb2xlYW47XHJcbiAgY29sb3I/OiBzdHJpbmdbXVxyXG59XHJcblxyXG5pbnRlcmZhY2UgTGluZUJhc2VQcm9wcyB7XHJcbiAgZGF0YT86IGFueVtdO1xyXG4gIHdpZHRoPzogc3RyaW5nO1xyXG4gIGhlaWdodD86IHN0cmluZztcclxuICAvKiog5piv5ZCm5bmz5ruR5puy57q/5pi+56S6ICovXHJcbiAgc21vb3RoPzogYm9vbGVhbjtcclxuICAvKiog5a2X5L2T6aKc6ImyICovXHJcbiAgY29sb3I/OiBzdHJpbmc7XHJcbiAgLyoqIHgsIHnovbTovbTnur/nur/mnaHpopzoibIgKi9cclxuICBsaW5lQ29sb3I/OiBzdHJpbmc7XHJcbiAgLyoqIHgsIHnovbTnvZHmoLznur/mnaHpopzoibIgKi9cclxuICBzcGxpdENvbG9yPzogc3RyaW5nO1xyXG4gIC8qKiDlrZfkvZPlpKflsI/vvIzpu5jorqQxNOWDj+e0oCAqL1xyXG4gIGZvbnRTaXplPzogbnVtYmVyIHwgc3RyaW5nO1xyXG4gIC8qKiDmipjnur/popzoibIgKi9cclxuICBjb2xvcnM/OiBzdHJpbmdbXTtcclxuICAvKiog5piv5ZCm6Ieq5Yqo5YiH5o2iIFRvb2x0aXAgKi9cclxuICBpc1N3aXRjaD86IGJvb2xlYW47XHJcbiAgLyoqIOiHquWKqOWIh+aNouS6i+S7tiDpu5jorqQgMjAwMO+8iDJT77yJICovXHJcbiAgc3dpdGNoVGltZT86IG51bWJlcjtcclxuICAvKiog5Yy65Z+f5aGr5YWF5qC35byPICovXHJcbiAgYXJlYVN0eWxlPzogYXJlYVN0eWxlUHJvcHM7XHJcbiAgLyoqXHJcbiAgICogWCDovbTphY3nva5cclxuICAgKiBAY29sb3Ig5paH5a2X6aKc6ImyXHJcbiAgICogQHNpemUg5paH5a2X5aSn5bCPXHJcbiAgICogQGxpbmVDb2xvciB46L206L2057q/57q/5p2h6aKc6ImyLCBmYWxzZSDliJnkuI3mmL7npLpcclxuICAgKiBAc3BsaXRDb2xvciB46L20572R5qC857q/5p2h6aKc6ImyLCBmYWxzZSDliJnkuI3mmL7npLosIOm7mOiupHRydWVcclxuICAgKiBAcm90YXRlIOWIu+W6puagh+etvuaXi+i9rOinkuW6plxyXG4gICAqIEBpc1RpY2sg5piv5ZCm5pi+56S65Z2Q5qCH6L205Yi75bqmXHJcbiAgICovXHJcbiAgeEF4aXM/OiB4QXhpc1Byb3BzO1xyXG4gIC8qKlxyXG4gICAqIHkg6L206YWN572uXHJcbiAgICogQG5hbWUg5Z2Q5qCH6L205ZCN56ewXHJcbiAgICogQGNvbG9yIOaWh+Wtl+minOiJslxyXG4gICAqIEBzaXplIOaWh+Wtl+Wkp+Wwj1xyXG4gICAqIEBsaW5lQ29sb3Igeei9tOi9tOe6v+e6v+adoeminOiJsiwgZmFsc2Ug5YiZ5LiN5pi+56S6XHJcbiAgICogQHNwbGl0Q29sb3Igeei9tOe9keagvOe6v+adoeminOiJsiwgZmFsc2Ug5YiZ5LiN5pi+56S6LCDpu5jorqRmYWxzZVxyXG4gICAqL1xyXG4gIHlBeGlzPzogeUF4aXNQcm9wcztcclxuICBncmlkPzogR3JpZENvbXBvbmVudE9wdGlvbjtcclxuICBvbkNsaWNrPzogKHY6IGFueSkgPT4gdm9pZDtcclxufVxyXG5cclxuY29uc3QgRUNoYXJ0c0xpbmUgPSAocHJvcHM6IExpbmVCYXNlUHJvcHMpID0+IHtcclxuICBjb25zdCB7XHJcbiAgICB3aWR0aCA9ICcxMDAlJyxcclxuICAgIGhlaWdodCA9ICcxMDAlJyxcclxuICAgIHNtb290aCA9IGZhbHNlLFxyXG4gICAgY29sb3JzID0gWycjNTQ3MGM2JywgJyM5MWNjNzUnLCAnI2ZhYzg1OCcsICcjZWU2NjY2JywgJyM3M2MwZGUnLCAnIzNiYTI3MicsICcjZmM4NDUyJywgJyM5YTYwYjQnLCAnI2VhN2NjYyddLFxyXG4gICAgY29sb3IgPSAnIzMzMycsXHJcbiAgICBsaW5lQ29sb3IgPSAnI2FiYjlkMCcsXHJcbiAgICBzcGxpdENvbG9yID0gJyNlMGU3ZjMnLFxyXG4gICAgZm9udFNpemUgPSAxNCxcclxuICAgIGRhdGEgPSBbXSxcclxuICAgIHhBeGlzID0ge30sXHJcbiAgICB5QXhpcyA9IHt9LFxyXG4gICAgZ3JpZCA9IHt9LFxyXG4gICAgYXJlYVN0eWxlID0ge30sXHJcbiAgICBpc1N3aXRjaCA9IGZhbHNlLFxyXG4gICAgc3dpdGNoVGltZSA9IDIwMDAsXHJcbiAgICBvbkNsaWNrXHJcbiAgfSA9IHByb3BzO1xyXG5cclxuICBjb25zdCBjaGFydFJlZiA9IHVzZVJlZjxhbnk+KG51bGwpXHJcbiAgY29uc3QgW215Q2hhcnQsIHNldE15Q2hhcnRdID0gdXNlU3RhdGU8YW55PihudWxsKTtcclxuICBjb25zdCBbaXNIaWdoXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcclxuICBjb25zdCBbaGlnaEluZGV4LCBzZXRIaWdoSW5kZXhdID0gdXNlU3RhdGU8bnVtYmVyPigwKTtcclxuICBcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGxldCBfbXlDaGFydDogYW55ID0gZWNoYXJ0cy5pbml0KGNoYXJ0UmVmLmN1cnJlbnQpO1xyXG4gICAgc2V0TXlDaGFydChfbXlDaGFydClcclxuXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBfbXlDaGFydC5yZXNpemUsIGZhbHNlKTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgX215Q2hhcnQucmVzaXplLCBmYWxzZSk7XHJcbiAgICBfbXlDaGFydC5vZmYoJ2NsaWNrJyk7XHJcbiAgICBfbXlDaGFydC5vbignY2xpY2snLCAodjogYW55KSA9PiB7XHJcbiAgICAgIG9uQ2xpY2s/Lih2LmRhdGEpO1xyXG4gICAgICBjb25zb2xlLmxvZyh2LmRhdGEpXHJcbiAgICB9KVxyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coMilcclxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIF9teUNoYXJ0LnJlc2l6ZSwgZmFsc2UpO1xyXG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZCcsIF9teUNoYXJ0LnJlc2l6ZSwgZmFsc2UpO1xyXG4gICAgICBfbXlDaGFydC5kaXNwb3NlKCk7XHJcbiAgICB9XHJcbiAgfSwgW10pXHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAobXlDaGFydCkge1xyXG4gICAgICBteUNoYXJ0LmNsZWFyKCk7XHJcbiAgICAgIGNvbnN0IF9uYW1lczogc3RyaW5nW10gPSBbXTtcclxuICAgICAgZGF0YS5sZW5ndGggPiAwICYmIGRhdGEubWFwKChpdGVtOiBhbnkpID0+IHtcclxuICAgICAgICBfbmFtZXMucHVzaChpdGVtLm5hbWUpO1xyXG4gICAgICB9KVxyXG4gICAgICBjb25zdCBfZ3JpZDogR3JpZENvbXBvbmVudE9wdGlvbiA9IHsuLi57XHJcbiAgICAgICAgdG9wOiAnNSUnLFxyXG4gICAgICAgIGJvdHRvbTogJzEwJScsXHJcbiAgICAgICAgbGVmdDogJzEwJScsXHJcbiAgICAgICAgcmlnaHQ6ICc1JScsXHJcbiAgICAgIH0sIC4uLmdyaWR9O1xyXG4gICAgICBjb25zdCBfeEF4aXM6IGFueSA9IHtcclxuICAgICAgICB0eXBlOiAnY2F0ZWdvcnknLFxyXG4gICAgICAgIGJvdW5kYXJ5R2FwOiBmYWxzZSxcclxuICAgICAgICBheGlzTGFiZWw6IHtcclxuICAgICAgICAgIGNvbG9yOiB4QXhpcy5jb2xvciA/IHhBeGlzLmNvbG9yIDogY29sb3IsXHJcbiAgICAgICAgICBmb250U2l6ZTogeEF4aXMuZm9udFNpemUgPyB4QXhpcy5mb250U2l6ZSA6IGZvbnRTaXplLFxyXG4gICAgICAgICAgcm90YXRlOiB4QXhpcy5yb3RhdGUgPyB4QXhpcy5yb3RhdGUgOiAwLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYXhpc0xpbmU6IHtcclxuICAgICAgICAgIHNob3c6IHhBeGlzLmxpbmVDb2xvciA9PT0gZmFsc2UgPyBmYWxzZSA6IHRydWUsXHJcbiAgICAgICAgICBsaW5lU3R5bGU6IHtcclxuICAgICAgICAgICAgY29sb3I6IHhBeGlzLmxpbmVDb2xvciA/IHhBeGlzLmxpbmVDb2xvciA6IGxpbmVDb2xvcixcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGF4aXNUaWNrOiB7XHJcbiAgICAgICAgICBzaG93OiB4QXhpcy5pc1RpY2ssXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzcGxpdExpbmU6IHtcclxuICAgICAgICAgIHNob3c6IHhBeGlzLnNwbGl0Q29sb3IgPyB0cnVlIDogZmFsc2UsXHJcbiAgICAgICAgICBsaW5lU3R5bGU6IHtcclxuICAgICAgICAgICAgY29sb3I6IHhBeGlzLnNwbGl0Q29sb3IgPyB4QXhpcy5zcGxpdENvbG9yIDogc3BsaXRDb2xvcixcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGRhdGE6IF9uYW1lc1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IF95QXhpczogYW55ID0ge1xyXG4gICAgICAgIG5hbWU6IHlBeGlzLm5hbWUsXHJcbiAgICAgICAgdHlwZTogJ3ZhbHVlJyxcclxuICAgICAgICBheGlzTGFiZWw6IHtcclxuICAgICAgICAgIGNvbG9yOiB5QXhpcy5jb2xvciA/IHlBeGlzLmNvbG9yIDogY29sb3IsXHJcbiAgICAgICAgICBmb250U2l6ZTogeUF4aXMuZm9udFNpemUgPyB5QXhpcy5mb250U2l6ZSA6IGZvbnRTaXplLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYXhpc0xpbmU6IHtcclxuICAgICAgICAgIHNob3c6IHlBeGlzLmxpbmVDb2xvciA9PT0gZmFsc2UgPyBmYWxzZSA6IHRydWUsXHJcbiAgICAgICAgICBsaW5lU3R5bGU6IHtcclxuICAgICAgICAgICAgY29sb3I6IHlBeGlzLmxpbmVDb2xvciA/IHlBeGlzLmxpbmVDb2xvciA6IGxpbmVDb2xvcixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBheGlzVGljazoge1xyXG4gICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzcGxpdExpbmU6IHtcclxuICAgICAgICAgIHNob3c6IHlBeGlzLnNwbGl0Q29sb3IgPT09IGZhbHNlID8gZmFsc2UgOiB0cnVlLFxyXG4gICAgICAgICAgbGluZVN0eWxlOiB7XHJcbiAgICAgICAgICAgIGNvbG9yOiB5QXhpcy5zcGxpdENvbG9yID8geUF4aXMuc3BsaXRDb2xvciA6IHNwbGl0Q29sb3IsXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgfVxyXG4gICAgICBsZXQgX2FyZWFDb2xvcjogYW55O1xyXG4gICAgICBpZiAoYXJlYVN0eWxlLmlzR3JhZCkge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZWFTdHlsZS5jb2xvcikgJiYgYXJlYVN0eWxlLmNvbG9yLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgIF9hcmVhQ29sb3IgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInLFxyXG4gICAgICAgICAgICB4OiAwLFxyXG4gICAgICAgICAgICB5OiAwLFxyXG4gICAgICAgICAgICB4MjogMCxcclxuICAgICAgICAgICAgeTI6IDEsXHJcbiAgICAgICAgICAgIGNvbG9yU3RvcHM6IFt7XHJcbiAgICAgICAgICAgICAgb2Zmc2V0OiAwLCBjb2xvcjogYXJlYVN0eWxlLmNvbG9yWzBdXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIG9mZnNldDogMSwgY29sb3I6IGFyZWFTdHlsZS5jb2xvclsxXVxyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgZ2xvYmFsOiBmYWxzZVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBfYXJlYUNvbG9yID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAnbGluZWFyJyxcclxuICAgICAgICAgICAgeDogMCxcclxuICAgICAgICAgICAgeTogMCxcclxuICAgICAgICAgICAgeDI6IDAsXHJcbiAgICAgICAgICAgIHkyOiAxLFxyXG4gICAgICAgICAgICBjb2xvclN0b3BzOiBbe1xyXG4gICAgICAgICAgICAgIG9mZnNldDogMCwgY29sb3I6IGNvbG9yc1swXVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgb2Zmc2V0OiAxLCBjb2xvcjogJ3JnYmEoMjU1LDI1NSwyNTUsMCknXHJcbiAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICBnbG9iYWw6IGZhbHNlXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIG15Q2hhcnQuc2V0T3B0aW9uKHtcclxuICAgICAgICB0b29sdGlwOiB7XHJcbiAgICAgICAgICB0cmlnZ2VyOiAnYXhpcycsXHJcbiAgICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb246IDAsXHJcbiAgICAgICAgICBlbnRlcmFibGU6IHRydWUsXHJcbiAgICAgICAgICBheGlzUG9pbnRlcjoge1xyXG4gICAgICAgICAgICB0eXBlOiAnc2hhZG93J1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29sb3I6IGNvbG9ycyxcclxuICAgICAgICBncmlkOiBfZ3JpZCxcclxuICAgICAgICB4QXhpczogX3hBeGlzLFxyXG4gICAgICAgIHlBeGlzOiBfeUF4aXMsXHJcbiAgICAgICAgc2VyaWVzOiBbXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgICAgIHR5cGU6ICdsaW5lJyxcclxuICAgICAgICAgICAgc21vb3RoOiBzbW9vdGgsXHJcbiAgICAgICAgICAgIGFyZWFTdHlsZTogYXJlYVN0eWxlLnNob3cgPyB7XHJcbiAgICAgICAgICAgICAgY29sb3I6IF9hcmVhQ29sb3JcclxuICAgICAgICAgICAgfSA6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgbGluZVN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgd2lkdGg6IDFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIF1cclxuICAgICAgfSwgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgfSwgW215Q2hhcnQsIGRhdGFdKVxyXG4gIFxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBsZXQgZmF1bHRCeUhvdXJUaW1lOiBhbnk7XHJcbiAgICBpZiAobXlDaGFydCAmJiBpc1N3aXRjaCAmJiAhaXNIaWdoICYmIGRhdGEubGVuZ3RoID4gMCkge1xyXG4gICAgICBmYXVsdEJ5SG91clRpbWUgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgICAgc2V0SGlnaEluZGV4KG4gPT4ge1xyXG4gICAgICAgICAgbXlDaGFydC5kaXNwYXRjaEFjdGlvbih7XHJcbiAgICAgICAgICAgIHR5cGU6ICdzaG93VGlwJyxcclxuICAgICAgICAgICAgc2VyaWVzSW5kZXg6IDAsXHJcbiAgICAgICAgICAgIGRhdGFJbmRleDogblxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBpZiAobiA+PSBkYXRhLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbiArIDFcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICB9LCBzd2l0Y2hUaW1lKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgY2xlYXJJbnRlcnZhbChmYXVsdEJ5SG91clRpbWUpXHJcbiAgICB9XHJcbiAgfSwgW215Q2hhcnQsIGlzU3dpdGNoLCBpc0hpZ2gsIGRhdGFdKVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiByZWY9e2NoYXJ0UmVmfVxyXG4gICAgICBzdHlsZT17e1xyXG4gICAgICAgICd3aWR0aCc6IHdpZHRoLFxyXG4gICAgICAgICdoZWlnaHQnOiBoZWlnaHRcclxuICAgICAgfX0+XHJcbiAgICA8L2Rpdj5cclxuICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEVDaGFydHNMaW5lOyJdfQ==