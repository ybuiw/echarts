import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useEffect, useRef, useState } from 'react';
import * as echarts from 'echarts/core';
import { TooltipComponent, LegendComponent } from 'echarts/components';
import { PieChart } from 'echarts/charts';
import { CanvasRenderer } from 'echarts/renderers';
echarts.use([TooltipComponent, LegendComponent, PieChart, CanvasRenderer]);

var EChartsPie = function EChartsPie(props) {
  var _props$width = props.width,
      width = _props$width === void 0 ? '100%' : _props$width,
      _props$height = props.height,
      height = _props$height === void 0 ? '100%' : _props$height,
      _props$colors = props.colors,
      colors = _props$colors === void 0 ? ['#5470c6', '#91cc75', '#fac858', '#ee6666', '#73c0de', '#3ba272', '#fc8452', '#9a60b4', '#ea7ccc'] : _props$colors,
      _props$label = props.label,
      label = _props$label === void 0 ? {} : _props$label,
      _props$series = props.series,
      series = _props$series === void 0 ? {} : _props$series,
      _props$legend = props.legend,
      legend = _props$legend === void 0 ? {} : _props$legend,
      _props$data = props.data,
      data = _props$data === void 0 ? [] : _props$data,
      _props$isSwitch = props.isSwitch,
      isSwitch = _props$isSwitch === void 0 ? false : _props$isSwitch,
      _props$switchTime = props.switchTime,
      switchTime = _props$switchTime === void 0 ? 2000 : _props$switchTime,
      onClick = props.onClick;
  var chartRef = useRef(null);

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      myChart = _useState2[0],
      setMyChart = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 1),
      isHigh = _useState4[0];

  var _useState5 = useState(0),
      _useState6 = _slicedToArray(_useState5, 2),
      highIndex = _useState6[0],
      setHighIndex = _useState6[1];

  useEffect(function () {
    var _myChart = echarts.init(chartRef.current);

    setMyChart(_myChart);
    window.addEventListener("resize", _myChart.resize, false);
    window.addEventListener('load', _myChart.resize, false);

    _myChart.off('click');

    _myChart.on('click', function (v) {
      onClick === null || onClick === void 0 ? void 0 : onClick(v.data);
      console.log(v.data);
    });

    return function () {
      window.removeEventListener('resize', _myChart.resize, false);
      window.removeEventListener('load', _myChart.resize, false);

      _myChart.dispose();
    };
  }, []);
  useEffect(function () {
    if (myChart) {
      myChart.clear();
      var _names = [];
      data.length > 0 && data.map(function (item) {
        _names.push(item.name);
      });

      var _legend = _objectSpread(_objectSpread({}, {
        bottom: '5%',
        left: 'center',
        icon: 'circle',
        show: true
      }), legend);

      myChart.setOption({
        tooltip: {
          trigger: 'item',
          transitionDuration: 0
        },
        legend: _legend,
        color: colors,
        series: [{
          data: data,
          type: 'pie',
          radius: series.radius ? series.radius : '70%',
          center: series.center ? series.center : ['50%', '50%'],
          label: {
            show: label.show,
            alignTo: label.edgeDistance ? 'edge' : 'none',
            fontSize: label.fontSize,
            edgeDistance: label.edgeDistance,
            minMargin: label.minMargin ? label.minMargin : 10,
            color: label.color,
            lineHeight: label.lineHeight ? label.lineHeight : 20,
            formatter: label.formatter ? label.formatter : false
          },
          labelLine: {
            length: label.length ? label.length : 10,
            length2: label.length2 ? label.length2 : 20
          }
        }]
      }, true);
    }
  }, [myChart, data]);
  useEffect(function () {
    var faultByHourTime;

    if (myChart && isSwitch && !isHigh && data.length > 0) {
      faultByHourTime = setInterval(function () {
        setHighIndex(function (n) {
          myChart.dispatchAction({
            type: 'showTip',
            seriesIndex: 0,
            dataIndex: n
          });

          if (n >= data.length - 1) {
            return 0;
          } else {
            return n + 1;
          }
        });
      }, switchTime);
    }

    return function () {
      clearInterval(faultByHourTime);
    };
  }, [myChart, isSwitch, isHigh, data]);
  return /*#__PURE__*/React.createElement("div", {
    ref: chartRef,
    style: {
      'width': width,
      'height': height
    }
  });
};

export default EChartsPie;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,